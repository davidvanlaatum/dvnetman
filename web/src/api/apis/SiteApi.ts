// noinspection all
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * DVNetMan
 * DVNetMan
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Site,
  SiteSearchBody,
  SiteSearchResults,
} from '../models/index';
import {
    SiteFromJSON,
    SiteToJSON,
    SiteSearchBodyFromJSON,
    SiteSearchBodyToJSON,
    SiteSearchResultsFromJSON,
    SiteSearchResultsToJSON,
} from '../models/index';

export interface CreateSiteRequest {
    site: Omit<Site, 'created'|'id'|'updated'>;
}

export interface DeleteSiteRequest {
    id: string;
}

export interface GetSiteRequest {
    id: string;
    ifNoneMatch?: string;
    ifModifiedSince?: Date;
}

export interface ListSitesRequest {
    page?: number;
    perPage?: number;
    sort?: string;
    siteSearchBody?: SiteSearchBody;
}

export interface UpdateSiteRequest {
    id: string;
    site: Omit<Site, 'created'|'id'|'updated'>;
}

/**
 * SiteApi - interface
 * 
 * @export
 * @interface SiteApiInterface
 */
export interface SiteApiInterface {
    /**
     * 
     * @param {Site} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApiInterface
     */
    createSiteRaw(requestParameters: CreateSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Site>>;

    /**
     */
    createSite(requestParameters: CreateSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Site>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApiInterface
     */
    deleteSiteRaw(requestParameters: DeleteSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteSite(requestParameters: DeleteSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} id 
     * @param {string} [ifNoneMatch] 
     * @param {Date} [ifModifiedSince] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApiInterface
     */
    getSiteRaw(requestParameters: GetSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Site>>;

    /**
     */
    getSite(requestParameters: GetSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Site>;

    /**
     * 
     * @param {number} [page] Page number
     * @param {number} [perPage] Number of items per page
     * @param {string} [sort] Sort order
     * @param {SiteSearchBody} [siteSearchBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApiInterface
     */
    listSitesRaw(requestParameters: ListSitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSearchResults>>;

    /**
     */
    listSites(requestParameters: ListSitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSearchResults>;

    /**
     * 
     * @param {string} id 
     * @param {Site} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApiInterface
     */
    updateSiteRaw(requestParameters: UpdateSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Site>>;

    /**
     */
    updateSite(requestParameters: UpdateSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Site>;

}

/**
 * 
 */
export class SiteApi extends runtime.BaseAPI implements SiteApiInterface {

    /**
     */
    async createSiteRaw(requestParameters: CreateSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Site>> {
        if (requestParameters['site'] == null) {
            throw new runtime.RequiredError(
                'site',
                'Required parameter "site" was null or undefined when calling createSite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/site`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteToJSON(requestParameters['site']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteFromJSON(jsonValue));
    }

    /**
     */
    async createSite(requestParameters: CreateSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Site> {
        const response = await this.createSiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSiteRaw(requestParameters: DeleteSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/site/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteSite(requestParameters: DeleteSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSiteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getSiteRaw(requestParameters: GetSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Site>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = String(requestParameters['ifNoneMatch']);
        }

        if (requestParameters['ifModifiedSince'] != null) {
            headerParameters['If-Modified-Since'] = String(requestParameters['ifModifiedSince']);
        }

        const response = await this.request({
            path: `/api/v1/site/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteFromJSON(jsonValue));
    }

    /**
     */
    async getSite(requestParameters: GetSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Site> {
        const response = await this.getSiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listSitesRaw(requestParameters: ListSitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSearchResults>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/site/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteSearchBodyToJSON(requestParameters['siteSearchBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteSearchResultsFromJSON(jsonValue));
    }

    /**
     */
    async listSites(requestParameters: ListSitesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSearchResults> {
        const response = await this.listSitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSiteRaw(requestParameters: UpdateSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Site>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateSite().'
            );
        }

        if (requestParameters['site'] == null) {
            throw new runtime.RequiredError(
                'site',
                'Required parameter "site" was null or undefined when calling updateSite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/site/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SiteToJSON(requestParameters['site']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteFromJSON(jsonValue));
    }

    /**
     */
    async updateSite(requestParameters: UpdateSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Site> {
        const response = await this.updateSiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
