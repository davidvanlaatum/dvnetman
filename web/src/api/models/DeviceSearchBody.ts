// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

/**
 * DVNetMan
 * DVNetMan
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface DeviceSearchBody
 */
export interface DeviceSearchBody {
  /**
   *
   * @type {Array<string>}
   * @memberof DeviceSearchBody
   */
  deviceType?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof DeviceSearchBody
   */
  fields?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof DeviceSearchBody
   */
  ids?: Array<string>
  /**
   *
   * @type {string}
   * @memberof DeviceSearchBody
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof DeviceSearchBody
   */
  nameRegex?: string
  /**
   *
   * @type {string}
   * @memberof DeviceSearchBody
   */
  status?: string
}

/**
 * Check if a given object implements the DeviceSearchBody interface.
 */
export function instanceOfDeviceSearchBody(value: object): value is DeviceSearchBody {
  return true
}

export function DeviceSearchBodyFromJSON(json: any): DeviceSearchBody {
  return DeviceSearchBodyFromJSONTyped(json, false)
}

export function DeviceSearchBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceSearchBody {
  if (json == null) {
    return json
  }
  return {
    deviceType: json['deviceType'] == null ? undefined : json['deviceType'],
    fields: json['fields'] == null ? undefined : json['fields'],
    ids: json['ids'] == null ? undefined : json['ids'],
    name: json['name'] == null ? undefined : json['name'],
    nameRegex: json['nameRegex'] == null ? undefined : json['nameRegex'],
    status: json['status'] == null ? undefined : json['status'],
  }
}

export function DeviceSearchBodyToJSON(json: any): DeviceSearchBody {
  return DeviceSearchBodyToJSONTyped(json, false)
}

export function DeviceSearchBodyToJSONTyped(
  value?: DeviceSearchBody | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    deviceType: value['deviceType'],
    fields: value['fields'],
    ids: value['ids'],
    name: value['name'],
    nameRegex: value['nameRegex'],
    status: value['status'],
  }
}
