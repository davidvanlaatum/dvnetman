// noinspection all
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * DVNetMan
 * DVNetMan
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Tag } from './Tag';
import {
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
    TagToJSONTyped,
} from './Tag';

/**
 * 
 * @export
 * @interface SiteResult
 */
export interface SiteResult {
    /**
     * 
     * @type {Date}
     * @memberof SiteResult
     */
    readonly created?: Date;
    /**
     * 
     * @type {string}
     * @memberof SiteResult
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SiteResult
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof SiteResult
     */
    name: string;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof SiteResult
     */
    tags?: Array<Tag>;
    /**
     * 
     * @type {Date}
     * @memberof SiteResult
     */
    readonly updated?: Date;
    /**
     * 
     * @type {number}
     * @memberof SiteResult
     */
    version: number;
}

/**
 * Check if a given object implements the SiteResult interface.
 */
export function instanceOfSiteResult(value: object): value is SiteResult {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    return true;
}

export function SiteResultFromJSON(json: any): SiteResult {
    return SiteResultFromJSONTyped(json, false);
}

export function SiteResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): SiteResult {
    if (json == null) {
        return json;
    }
    return {
        
        'created': json['created'] == null ? undefined : (new Date(json['created'])),
        'description': json['description'] == null ? undefined : json['description'],
        'id': json['id'],
        'name': json['name'],
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
        'updated': json['updated'] == null ? undefined : (new Date(json['updated'])),
        'version': json['version'],
    };
}

export function SiteResultToJSON(json: any): SiteResult {
    return SiteResultToJSONTyped(json, false);
}

export function SiteResultToJSONTyped(value?: Omit<SiteResult, 'created'|'id'|'updated'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'name': value['name'],
        'tags': value['tags'] == null ? undefined : ((value['tags'] as Array<any>).map(TagToJSON)),
        'version': value['version'],
    };
}

