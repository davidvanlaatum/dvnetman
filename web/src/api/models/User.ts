// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * DVNetMan
 * DVNetMan
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Tag } from './Tag'
import { TagFromJSON, TagToJSON } from './Tag'

/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {Date}
   * @memberof User
   */
  readonly created?: Date
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  externalID?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  externalProvider?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  firstName?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  readonly id: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  lastName?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  password?: string
  /**
   *
   * @type {Array<Tag>}
   * @memberof User
   */
  tags?: Array<Tag>
  /**
   *
   * @type {Date}
   * @memberof User
   */
  readonly updated?: Date
  /**
   *
   * @type {string}
   * @memberof User
   */
  username?: string
  /**
   *
   * @type {number}
   * @memberof User
   */
  version: number
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
  if (!('id' in value) || value['id'] === undefined) return false
  if (!('version' in value) || value['version'] === undefined) return false
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
      created: json['created'] == null ? undefined : new Date(json['created']),
      email: json['email'] == null ? undefined : json['email'],
      externalID: json['externalID'] == null ? undefined : json['externalID'],
      externalProvider: json['externalProvider'] == null ? undefined : json['externalProvider'],
      firstName: json['firstName'] == null ? undefined : json['firstName'],
      id: json['id'],
      lastName: json['lastName'] == null ? undefined : json['lastName'],
      password: json['password'] == null ? undefined : json['password'],
      tags: json['tags'] == null ? undefined : (json['tags'] as Array<any>).map(TagFromJSON),
      updated: json['updated'] == null ? undefined : new Date(json['updated']),
      username: json['username'] == null ? undefined : json['username'],
      version: json['version'],
    }
}

export function UserToJSON(json: any): User {
    return UserToJSONTyped(json, false);
}

export function UserToJSONTyped(
  value?: Omit<User, 'created' | 'id' | 'updated'> | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    email: value['email'],
    externalID: value['externalID'],
    externalProvider: value['externalProvider'],
    firstName: value['firstName'],
    lastName: value['lastName'],
    password: value['password'],
    tags: value['tags'] == null ? undefined : (value['tags'] as Array<any>).map(TagToJSON),
    username: value['username'],
    version: value['version'],
  }
}

