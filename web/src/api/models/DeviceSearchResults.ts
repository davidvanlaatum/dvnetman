// noinspection all
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * DVNetMan
 * DVNetMan
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DeviceResult } from './DeviceResult';
import {
    DeviceResultFromJSON,
    DeviceResultFromJSONTyped,
    DeviceResultToJSON,
    DeviceResultToJSONTyped,
} from './DeviceResult';

/**
 * 
 * @export
 * @interface DeviceSearchResults
 */
export interface DeviceSearchResults {
    /**
     * 
     * @type {number}
     * @memberof DeviceSearchResults
     */
    count: number;
    /**
     * 
     * @type {Array<DeviceResult>}
     * @memberof DeviceSearchResults
     */
    items: Array<DeviceResult>;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceSearchResults
     */
    next: boolean;
}

/**
 * Check if a given object implements the DeviceSearchResults interface.
 */
export function instanceOfDeviceSearchResults(value: object): value is DeviceSearchResults {
    if (!('count' in value) || value['count'] === undefined) return false;
    if (!('items' in value) || value['items'] === undefined) return false;
    if (!('next' in value) || value['next'] === undefined) return false;
    return true;
}

export function DeviceSearchResultsFromJSON(json: any): DeviceSearchResults {
    return DeviceSearchResultsFromJSONTyped(json, false);
}

export function DeviceSearchResultsFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceSearchResults {
    if (json == null) {
        return json;
    }
    return {
        
        'count': json['count'],
        'items': ((json['items'] as Array<any>).map(DeviceResultFromJSON)),
        'next': json['next'],
    };
}

export function DeviceSearchResultsToJSON(json: any): DeviceSearchResults {
    return DeviceSearchResultsToJSONTyped(json, false);
}

export function DeviceSearchResultsToJSONTyped(value?: DeviceSearchResults | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'count': value['count'],
        'items': ((value['items'] as Array<any>).map(DeviceResultToJSON)),
        'next': value['next'],
    };
}

