// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

/**
 * DVNetMan
 * DVNetMan
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface UserSearchBody
 */
export interface UserSearchBody {
  /**
   *
   * @type {string}
   * @memberof UserSearchBody
   */
  email?: string
  /**
   *
   * @type {Array<string>}
   * @memberof UserSearchBody
   */
  fields?: Array<string>
  /**
   *
   * @type {string}
   * @memberof UserSearchBody
   */
  firstName?: string
  /**
   *
   * @type {string}
   * @memberof UserSearchBody
   */
  firstNameRegex?: string
  /**
   *
   * @type {string}
   * @memberof UserSearchBody
   */
  fullName?: string
  /**
   *
   * @type {string}
   * @memberof UserSearchBody
   */
  fullNameRegex?: string
  /**
   *
   * @type {Array<string>}
   * @memberof UserSearchBody
   */
  ids?: Array<string>
  /**
   *
   * @type {string}
   * @memberof UserSearchBody
   */
  lastName?: string
  /**
   *
   * @type {string}
   * @memberof UserSearchBody
   */
  lastNameRegex?: string
  /**
   *
   * @type {string}
   * @memberof UserSearchBody
   */
  username?: string
  /**
   *
   * @type {string}
   * @memberof UserSearchBody
   */
  usernameRegex?: string
}

/**
 * Check if a given object implements the UserSearchBody interface.
 */
export function instanceOfUserSearchBody(value: object): value is UserSearchBody {
  return true
}

export function UserSearchBodyFromJSON(json: any): UserSearchBody {
  return UserSearchBodyFromJSONTyped(json, false)
}

export function UserSearchBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSearchBody {
  if (json == null) {
    return json
  }
  return {
    email: json['email'] == null ? undefined : json['email'],
    fields: json['fields'] == null ? undefined : json['fields'],
    firstName: json['firstName'] == null ? undefined : json['firstName'],
    firstNameRegex: json['firstNameRegex'] == null ? undefined : json['firstNameRegex'],
    fullName: json['fullName'] == null ? undefined : json['fullName'],
    fullNameRegex: json['fullNameRegex'] == null ? undefined : json['fullNameRegex'],
    ids: json['ids'] == null ? undefined : json['ids'],
    lastName: json['lastName'] == null ? undefined : json['lastName'],
    lastNameRegex: json['lastNameRegex'] == null ? undefined : json['lastNameRegex'],
    username: json['username'] == null ? undefined : json['username'],
    usernameRegex: json['usernameRegex'] == null ? undefined : json['usernameRegex'],
  }
}

export function UserSearchBodyToJSON(json: any): UserSearchBody {
  return UserSearchBodyToJSONTyped(json, false)
}

export function UserSearchBodyToJSONTyped(value?: UserSearchBody | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {
    email: value['email'],
    fields: value['fields'],
    firstName: value['firstName'],
    firstNameRegex: value['firstNameRegex'],
    fullName: value['fullName'],
    fullNameRegex: value['fullNameRegex'],
    ids: value['ids'],
    lastName: value['lastName'],
    lastNameRegex: value['lastNameRegex'],
    username: value['username'],
    usernameRegex: value['usernameRegex'],
  }
}
