// Code generated by mockery v2.52.2. DO NOT EDIT.

package mongoadapt

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/v2/mongo"

	options "go.mongodb.org/mongo-driver/v2/mongo/options"
)

// MockMongoIndexView is an autogenerated mock type for the MongoIndexView type
type MockMongoIndexView struct {
	mock.Mock
}

type MockMongoIndexView_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMongoIndexView) EXPECT() *MockMongoIndexView_Expecter {
	return &MockMongoIndexView_Expecter{mock: &_m.Mock}
}

// CreateOne provides a mock function with given fields: ctx, model, opts
func (_m *MockMongoIndexView) CreateOne(ctx context.Context, model mongo.IndexModel, opts ...options.Lister[options.CreateIndexesOptions]) (string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, model)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOne")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mongo.IndexModel, ...options.Lister[options.CreateIndexesOptions]) (string, error)); ok {
		return rf(ctx, model, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mongo.IndexModel, ...options.Lister[options.CreateIndexesOptions]) string); ok {
		r0 = rf(ctx, model, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, mongo.IndexModel, ...options.Lister[options.CreateIndexesOptions]) error); ok {
		r1 = rf(ctx, model, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMongoIndexView_CreateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOne'
type MockMongoIndexView_CreateOne_Call struct {
	*mock.Call
}

// CreateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - model mongo.IndexModel
//   - opts ...options.Lister[options.CreateIndexesOptions]
func (_e *MockMongoIndexView_Expecter) CreateOne(ctx interface{}, model interface{}, opts ...interface{}) *MockMongoIndexView_CreateOne_Call {
	return &MockMongoIndexView_CreateOne_Call{Call: _e.mock.On("CreateOne",
		append([]interface{}{ctx, model}, opts...)...)}
}

func (_c *MockMongoIndexView_CreateOne_Call) Run(run func(ctx context.Context, model mongo.IndexModel, opts ...options.Lister[options.CreateIndexesOptions])) *MockMongoIndexView_CreateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.CreateIndexesOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.CreateIndexesOptions])
			}
		}
		run(args[0].(context.Context), args[1].(mongo.IndexModel), variadicArgs...)
	})
	return _c
}

func (_c *MockMongoIndexView_CreateOne_Call) Return(_a0 string, _a1 error) *MockMongoIndexView_CreateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMongoIndexView_CreateOne_Call) RunAndReturn(run func(context.Context, mongo.IndexModel, ...options.Lister[options.CreateIndexesOptions]) (string, error)) *MockMongoIndexView_CreateOne_Call {
	_c.Call.Return(run)
	return _c
}

// ListSpecifications provides a mock function with given fields: ctx, opts
func (_m *MockMongoIndexView) ListSpecifications(ctx context.Context, opts ...options.Lister[options.ListIndexesOptions]) ([]mongo.IndexSpecification, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSpecifications")
	}

	var r0 []mongo.IndexSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...options.Lister[options.ListIndexesOptions]) ([]mongo.IndexSpecification, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...options.Lister[options.ListIndexesOptions]) []mongo.IndexSpecification); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mongo.IndexSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...options.Lister[options.ListIndexesOptions]) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMongoIndexView_ListSpecifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSpecifications'
type MockMongoIndexView_ListSpecifications_Call struct {
	*mock.Call
}

// ListSpecifications is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...options.Lister[options.ListIndexesOptions]
func (_e *MockMongoIndexView_Expecter) ListSpecifications(ctx interface{}, opts ...interface{}) *MockMongoIndexView_ListSpecifications_Call {
	return &MockMongoIndexView_ListSpecifications_Call{Call: _e.mock.On("ListSpecifications",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockMongoIndexView_ListSpecifications_Call) Run(run func(ctx context.Context, opts ...options.Lister[options.ListIndexesOptions])) *MockMongoIndexView_ListSpecifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.ListIndexesOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.ListIndexesOptions])
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockMongoIndexView_ListSpecifications_Call) Return(_a0 []mongo.IndexSpecification, _a1 error) *MockMongoIndexView_ListSpecifications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMongoIndexView_ListSpecifications_Call) RunAndReturn(run func(context.Context, ...options.Lister[options.ListIndexesOptions]) ([]mongo.IndexSpecification, error)) *MockMongoIndexView_ListSpecifications_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMongoIndexView creates a new instance of MockMongoIndexView. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMongoIndexView(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMongoIndexView {
	mock := &MockMongoIndexView{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
