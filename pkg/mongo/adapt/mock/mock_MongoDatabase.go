// Code generated by mockery v2.52.2. DO NOT EDIT.

package mongoadapt

import (
	context "context"
	mongoadapt "dvnetman/pkg/mongo/adapt"

	mock "github.com/stretchr/testify/mock"

	options "go.mongodb.org/mongo-driver/v2/mongo/options"
)

// MockMongoDatabase is an autogenerated mock type for the MongoDatabase type
type MockMongoDatabase struct {
	mock.Mock
}

type MockMongoDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMongoDatabase) EXPECT() *MockMongoDatabase_Expecter {
	return &MockMongoDatabase_Expecter{mock: &_m.Mock}
}

// Collection provides a mock function with given fields: name, opts
func (_m *MockMongoDatabase) Collection(name string, opts ...options.Lister[options.CollectionOptions]) mongoadapt.MongoCollection {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 mongoadapt.MongoCollection
	if rf, ok := ret.Get(0).(func(string, ...options.Lister[options.CollectionOptions]) mongoadapt.MongoCollection); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoadapt.MongoCollection)
		}
	}

	return r0
}

// MockMongoDatabase_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type MockMongoDatabase_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
//   - name string
//   - opts ...options.Lister[options.CollectionOptions]
func (_e *MockMongoDatabase_Expecter) Collection(name interface{}, opts ...interface{}) *MockMongoDatabase_Collection_Call {
	return &MockMongoDatabase_Collection_Call{Call: _e.mock.On("Collection",
		append([]interface{}{name}, opts...)...)}
}

func (_c *MockMongoDatabase_Collection_Call) Run(run func(name string, opts ...options.Lister[options.CollectionOptions])) *MockMongoDatabase_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.CollectionOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.CollectionOptions])
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockMongoDatabase_Collection_Call) Return(_a0 mongoadapt.MongoCollection) *MockMongoDatabase_Collection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMongoDatabase_Collection_Call) RunAndReturn(run func(string, ...options.Lister[options.CollectionOptions]) mongoadapt.MongoCollection) *MockMongoDatabase_Collection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCollection provides a mock function with given fields: ctx, name, opts
func (_m *MockMongoDatabase) CreateCollection(ctx context.Context, name string, opts ...options.Lister[options.CreateCollectionOptions]) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...options.Lister[options.CreateCollectionOptions]) error); ok {
		r0 = rf(ctx, name, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMongoDatabase_CreateCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCollection'
type MockMongoDatabase_CreateCollection_Call struct {
	*mock.Call
}

// CreateCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts ...options.Lister[options.CreateCollectionOptions]
func (_e *MockMongoDatabase_Expecter) CreateCollection(ctx interface{}, name interface{}, opts ...interface{}) *MockMongoDatabase_CreateCollection_Call {
	return &MockMongoDatabase_CreateCollection_Call{Call: _e.mock.On("CreateCollection",
		append([]interface{}{ctx, name}, opts...)...)}
}

func (_c *MockMongoDatabase_CreateCollection_Call) Run(run func(ctx context.Context, name string, opts ...options.Lister[options.CreateCollectionOptions])) *MockMongoDatabase_CreateCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.CreateCollectionOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.CreateCollectionOptions])
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockMongoDatabase_CreateCollection_Call) Return(_a0 error) *MockMongoDatabase_CreateCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMongoDatabase_CreateCollection_Call) RunAndReturn(run func(context.Context, string, ...options.Lister[options.CreateCollectionOptions]) error) *MockMongoDatabase_CreateCollection_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollections provides a mock function with given fields: ctx, filter, opts
func (_m *MockMongoDatabase) ListCollections(ctx context.Context, filter interface{}, opts ...options.Lister[options.ListCollectionsOptions]) (mongoadapt.MongoCursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCollections")
	}

	var r0 mongoadapt.MongoCursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) (mongoadapt.MongoCursor, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) mongoadapt.MongoCursor); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoadapt.MongoCursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMongoDatabase_ListCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollections'
type MockMongoDatabase_ListCollections_Call struct {
	*mock.Call
}

// ListCollections is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...options.Lister[options.ListCollectionsOptions]
func (_e *MockMongoDatabase_Expecter) ListCollections(ctx interface{}, filter interface{}, opts ...interface{}) *MockMongoDatabase_ListCollections_Call {
	return &MockMongoDatabase_ListCollections_Call{Call: _e.mock.On("ListCollections",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockMongoDatabase_ListCollections_Call) Run(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.ListCollectionsOptions])) *MockMongoDatabase_ListCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.ListCollectionsOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.ListCollectionsOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockMongoDatabase_ListCollections_Call) Return(_a0 mongoadapt.MongoCursor, _a1 error) *MockMongoDatabase_ListCollections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMongoDatabase_ListCollections_Call) RunAndReturn(run func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) (mongoadapt.MongoCursor, error)) *MockMongoDatabase_ListCollections_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMongoDatabase creates a new instance of MockMongoDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMongoDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMongoDatabase {
	mock := &MockMongoDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
