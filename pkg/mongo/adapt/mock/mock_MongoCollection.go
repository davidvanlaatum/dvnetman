// Code generated by mockery v2.52.2. DO NOT EDIT.

package mongoadapt

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/v2/mongo"

	mongoadapt "dvnetman/pkg/mongo/adapt"

	options "go.mongodb.org/mongo-driver/v2/mongo/options"
)

// MockMongoCollection is an autogenerated mock type for the MongoCollection type
type MockMongoCollection struct {
	mock.Mock
}

type MockMongoCollection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMongoCollection) EXPECT() *MockMongoCollection_Expecter {
	return &MockMongoCollection_Expecter{mock: &_m.Mock}
}

// DeleteOne provides a mock function with given fields: ctx, filter, opts
func (_m *MockMongoCollection) DeleteOne(ctx context.Context, filter interface{}, opts ...options.Lister[options.DeleteOneOptions]) (*mongo.DeleteResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 *mongo.DeleteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.DeleteOneOptions]) (*mongo.DeleteResult, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.DeleteOneOptions]) *mongo.DeleteResult); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.DeleteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.DeleteOneOptions]) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMongoCollection_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type MockMongoCollection_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...options.Lister[options.DeleteOneOptions]
func (_e *MockMongoCollection_Expecter) DeleteOne(ctx interface{}, filter interface{}, opts ...interface{}) *MockMongoCollection_DeleteOne_Call {
	return &MockMongoCollection_DeleteOne_Call{Call: _e.mock.On("DeleteOne",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockMongoCollection_DeleteOne_Call) Run(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.DeleteOneOptions])) *MockMongoCollection_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.DeleteOneOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.DeleteOneOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockMongoCollection_DeleteOne_Call) Return(_a0 *mongo.DeleteResult, _a1 error) *MockMongoCollection_DeleteOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMongoCollection_DeleteOne_Call) RunAndReturn(run func(context.Context, interface{}, ...options.Lister[options.DeleteOneOptions]) (*mongo.DeleteResult, error)) *MockMongoCollection_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, filter, opts
func (_m *MockMongoCollection) Find(ctx context.Context, filter interface{}, opts ...options.Lister[options.FindOptions]) (mongoadapt.MongoCursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 mongoadapt.MongoCursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.FindOptions]) (mongoadapt.MongoCursor, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.FindOptions]) mongoadapt.MongoCursor); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoadapt.MongoCursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.FindOptions]) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMongoCollection_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockMongoCollection_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...options.Lister[options.FindOptions]
func (_e *MockMongoCollection_Expecter) Find(ctx interface{}, filter interface{}, opts ...interface{}) *MockMongoCollection_Find_Call {
	return &MockMongoCollection_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockMongoCollection_Find_Call) Run(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.FindOptions])) *MockMongoCollection_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.FindOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.FindOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockMongoCollection_Find_Call) Return(_a0 mongoadapt.MongoCursor, _a1 error) *MockMongoCollection_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMongoCollection_Find_Call) RunAndReturn(run func(context.Context, interface{}, ...options.Lister[options.FindOptions]) (mongoadapt.MongoCursor, error)) *MockMongoCollection_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, filter, opts
func (_m *MockMongoCollection) FindOne(ctx context.Context, filter interface{}, opts ...options.Lister[options.FindOneOptions]) *mongo.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *mongo.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.FindOneOptions]) *mongo.SingleResult); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}

	return r0
}

// MockMongoCollection_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockMongoCollection_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...options.Lister[options.FindOneOptions]
func (_e *MockMongoCollection_Expecter) FindOne(ctx interface{}, filter interface{}, opts ...interface{}) *MockMongoCollection_FindOne_Call {
	return &MockMongoCollection_FindOne_Call{Call: _e.mock.On("FindOne",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockMongoCollection_FindOne_Call) Run(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.FindOneOptions])) *MockMongoCollection_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.FindOneOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.FindOneOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockMongoCollection_FindOne_Call) Return(_a0 *mongo.SingleResult) *MockMongoCollection_FindOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMongoCollection_FindOne_Call) RunAndReturn(run func(context.Context, interface{}, ...options.Lister[options.FindOneOptions]) *mongo.SingleResult) *MockMongoCollection_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// Indexes provides a mock function with no fields
func (_m *MockMongoCollection) Indexes() mongoadapt.MongoIndexView {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Indexes")
	}

	var r0 mongoadapt.MongoIndexView
	if rf, ok := ret.Get(0).(func() mongoadapt.MongoIndexView); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoadapt.MongoIndexView)
		}
	}

	return r0
}

// MockMongoCollection_Indexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Indexes'
type MockMongoCollection_Indexes_Call struct {
	*mock.Call
}

// Indexes is a helper method to define mock.On call
func (_e *MockMongoCollection_Expecter) Indexes() *MockMongoCollection_Indexes_Call {
	return &MockMongoCollection_Indexes_Call{Call: _e.mock.On("Indexes")}
}

func (_c *MockMongoCollection_Indexes_Call) Run(run func()) *MockMongoCollection_Indexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMongoCollection_Indexes_Call) Return(_a0 mongoadapt.MongoIndexView) *MockMongoCollection_Indexes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMongoCollection_Indexes_Call) RunAndReturn(run func() mongoadapt.MongoIndexView) *MockMongoCollection_Indexes_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function with given fields: ctx, document, opts
func (_m *MockMongoCollection) InsertOne(ctx context.Context, document interface{}, opts ...options.Lister[options.InsertOneOptions]) (*mongo.InsertOneResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, document)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 *mongo.InsertOneResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.InsertOneOptions]) (*mongo.InsertOneResult, error)); ok {
		return rf(ctx, document, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.InsertOneOptions]) *mongo.InsertOneResult); ok {
		r0 = rf(ctx, document, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.InsertOneOptions]) error); ok {
		r1 = rf(ctx, document, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMongoCollection_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type MockMongoCollection_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - ctx context.Context
//   - document interface{}
//   - opts ...options.Lister[options.InsertOneOptions]
func (_e *MockMongoCollection_Expecter) InsertOne(ctx interface{}, document interface{}, opts ...interface{}) *MockMongoCollection_InsertOne_Call {
	return &MockMongoCollection_InsertOne_Call{Call: _e.mock.On("InsertOne",
		append([]interface{}{ctx, document}, opts...)...)}
}

func (_c *MockMongoCollection_InsertOne_Call) Run(run func(ctx context.Context, document interface{}, opts ...options.Lister[options.InsertOneOptions])) *MockMongoCollection_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.InsertOneOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.InsertOneOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockMongoCollection_InsertOne_Call) Return(_a0 *mongo.InsertOneResult, _a1 error) *MockMongoCollection_InsertOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMongoCollection_InsertOne_Call) RunAndReturn(run func(context.Context, interface{}, ...options.Lister[options.InsertOneOptions]) (*mongo.InsertOneResult, error)) *MockMongoCollection_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceOne provides a mock function with given fields: ctx, filter, update, opts
func (_m *MockMongoCollection) ReplaceOne(ctx context.Context, filter interface{}, update interface{}, opts ...options.Lister[options.ReplaceOptions]) (*mongo.UpdateResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceOne")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...options.Lister[options.ReplaceOptions]) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, filter, update, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...options.Lister[options.ReplaceOptions]) *mongo.UpdateResult); ok {
		r0 = rf(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...options.Lister[options.ReplaceOptions]) error); ok {
		r1 = rf(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMongoCollection_ReplaceOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceOne'
type MockMongoCollection_ReplaceOne_Call struct {
	*mock.Call
}

// ReplaceOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - update interface{}
//   - opts ...options.Lister[options.ReplaceOptions]
func (_e *MockMongoCollection_Expecter) ReplaceOne(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *MockMongoCollection_ReplaceOne_Call {
	return &MockMongoCollection_ReplaceOne_Call{Call: _e.mock.On("ReplaceOne",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *MockMongoCollection_ReplaceOne_Call) Run(run func(ctx context.Context, filter interface{}, update interface{}, opts ...options.Lister[options.ReplaceOptions])) *MockMongoCollection_ReplaceOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.ReplaceOptions], len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.ReplaceOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockMongoCollection_ReplaceOne_Call) Return(_a0 *mongo.UpdateResult, _a1 error) *MockMongoCollection_ReplaceOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMongoCollection_ReplaceOne_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...options.Lister[options.ReplaceOptions]) (*mongo.UpdateResult, error)) *MockMongoCollection_ReplaceOne_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function with given fields: ctx, filter, update, opts
func (_m *MockMongoCollection) UpdateOne(ctx context.Context, filter interface{}, update interface{}, opts ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, filter, update, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...options.Lister[options.UpdateOneOptions]) *mongo.UpdateResult); ok {
		r0 = rf(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...options.Lister[options.UpdateOneOptions]) error); ok {
		r1 = rf(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMongoCollection_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type MockMongoCollection_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - update interface{}
//   - opts ...options.Lister[options.UpdateOneOptions]
func (_e *MockMongoCollection_Expecter) UpdateOne(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *MockMongoCollection_UpdateOne_Call {
	return &MockMongoCollection_UpdateOne_Call{Call: _e.mock.On("UpdateOne",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *MockMongoCollection_UpdateOne_Call) Run(run func(ctx context.Context, filter interface{}, update interface{}, opts ...options.Lister[options.UpdateOneOptions])) *MockMongoCollection_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.UpdateOneOptions], len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.UpdateOneOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockMongoCollection_UpdateOne_Call) Return(_a0 *mongo.UpdateResult, _a1 error) *MockMongoCollection_UpdateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMongoCollection_UpdateOne_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error)) *MockMongoCollection_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMongoCollection creates a new instance of MockMongoCollection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMongoCollection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMongoCollection {
	mock := &MockMongoCollection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
