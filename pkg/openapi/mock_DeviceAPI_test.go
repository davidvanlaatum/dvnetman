// Code generated by mockery v2.52.2. DO NOT EDIT.

package openapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDeviceAPI is an autogenerated mock type for the DeviceAPI type
type MockDeviceAPI struct {
	mock.Mock
}

type MockDeviceAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeviceAPI) EXPECT() *MockDeviceAPI_Expecter {
	return &MockDeviceAPI_Expecter{mock: &_m.Mock}
}

// CreateDevice provides a mock function with given fields: ctx, opts
func (_m *MockDeviceAPI) CreateDevice(ctx context.Context, opts *CreateDeviceOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateDevice")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateDeviceOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateDeviceOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateDeviceOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceAPI_CreateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDevice'
type MockDeviceAPI_CreateDevice_Call struct {
	*mock.Call
}

// CreateDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *CreateDeviceOpts
func (_e *MockDeviceAPI_Expecter) CreateDevice(ctx interface{}, opts interface{}) *MockDeviceAPI_CreateDevice_Call {
	return &MockDeviceAPI_CreateDevice_Call{Call: _e.mock.On("CreateDevice", ctx, opts)}
}

func (_c *MockDeviceAPI_CreateDevice_Call) Run(run func(ctx context.Context, opts *CreateDeviceOpts)) *MockDeviceAPI_CreateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateDeviceOpts))
	})
	return _c
}

func (_c *MockDeviceAPI_CreateDevice_Call) Return(res *Response, err error) *MockDeviceAPI_CreateDevice_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockDeviceAPI_CreateDevice_Call) RunAndReturn(run func(context.Context, *CreateDeviceOpts) (*Response, error)) *MockDeviceAPI_CreateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDevice provides a mock function with given fields: ctx, opts
func (_m *MockDeviceAPI) DeleteDevice(ctx context.Context, opts *DeleteDeviceOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDevice")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteDeviceOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteDeviceOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DeleteDeviceOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceAPI_DeleteDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDevice'
type MockDeviceAPI_DeleteDevice_Call struct {
	*mock.Call
}

// DeleteDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *DeleteDeviceOpts
func (_e *MockDeviceAPI_Expecter) DeleteDevice(ctx interface{}, opts interface{}) *MockDeviceAPI_DeleteDevice_Call {
	return &MockDeviceAPI_DeleteDevice_Call{Call: _e.mock.On("DeleteDevice", ctx, opts)}
}

func (_c *MockDeviceAPI_DeleteDevice_Call) Run(run func(ctx context.Context, opts *DeleteDeviceOpts)) *MockDeviceAPI_DeleteDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteDeviceOpts))
	})
	return _c
}

func (_c *MockDeviceAPI_DeleteDevice_Call) Return(res *Response, err error) *MockDeviceAPI_DeleteDevice_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockDeviceAPI_DeleteDevice_Call) RunAndReturn(run func(context.Context, *DeleteDeviceOpts) (*Response, error)) *MockDeviceAPI_DeleteDevice_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevice provides a mock function with given fields: ctx, opts
func (_m *MockDeviceAPI) GetDevice(ctx context.Context, opts *GetDeviceOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetDevice")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetDeviceOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetDeviceOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetDeviceOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceAPI_GetDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevice'
type MockDeviceAPI_GetDevice_Call struct {
	*mock.Call
}

// GetDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *GetDeviceOpts
func (_e *MockDeviceAPI_Expecter) GetDevice(ctx interface{}, opts interface{}) *MockDeviceAPI_GetDevice_Call {
	return &MockDeviceAPI_GetDevice_Call{Call: _e.mock.On("GetDevice", ctx, opts)}
}

func (_c *MockDeviceAPI_GetDevice_Call) Run(run func(ctx context.Context, opts *GetDeviceOpts)) *MockDeviceAPI_GetDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetDeviceOpts))
	})
	return _c
}

func (_c *MockDeviceAPI_GetDevice_Call) Return(res *Response, err error) *MockDeviceAPI_GetDevice_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockDeviceAPI_GetDevice_Call) RunAndReturn(run func(context.Context, *GetDeviceOpts) (*Response, error)) *MockDeviceAPI_GetDevice_Call {
	_c.Call.Return(run)
	return _c
}

// ListDevices provides a mock function with given fields: ctx, opts
func (_m *MockDeviceAPI) ListDevices(ctx context.Context, opts *ListDevicesOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListDevices")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListDevicesOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListDevicesOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListDevicesOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceAPI_ListDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDevices'
type MockDeviceAPI_ListDevices_Call struct {
	*mock.Call
}

// ListDevices is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *ListDevicesOpts
func (_e *MockDeviceAPI_Expecter) ListDevices(ctx interface{}, opts interface{}) *MockDeviceAPI_ListDevices_Call {
	return &MockDeviceAPI_ListDevices_Call{Call: _e.mock.On("ListDevices", ctx, opts)}
}

func (_c *MockDeviceAPI_ListDevices_Call) Run(run func(ctx context.Context, opts *ListDevicesOpts)) *MockDeviceAPI_ListDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListDevicesOpts))
	})
	return _c
}

func (_c *MockDeviceAPI_ListDevices_Call) Return(res *Response, err error) *MockDeviceAPI_ListDevices_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockDeviceAPI_ListDevices_Call) RunAndReturn(run func(context.Context, *ListDevicesOpts) (*Response, error)) *MockDeviceAPI_ListDevices_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDevice provides a mock function with given fields: ctx, opts
func (_m *MockDeviceAPI) UpdateDevice(ctx context.Context, opts *UpdateDeviceOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevice")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateDeviceOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateDeviceOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpdateDeviceOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceAPI_UpdateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDevice'
type MockDeviceAPI_UpdateDevice_Call struct {
	*mock.Call
}

// UpdateDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *UpdateDeviceOpts
func (_e *MockDeviceAPI_Expecter) UpdateDevice(ctx interface{}, opts interface{}) *MockDeviceAPI_UpdateDevice_Call {
	return &MockDeviceAPI_UpdateDevice_Call{Call: _e.mock.On("UpdateDevice", ctx, opts)}
}

func (_c *MockDeviceAPI_UpdateDevice_Call) Run(run func(ctx context.Context, opts *UpdateDeviceOpts)) *MockDeviceAPI_UpdateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*UpdateDeviceOpts))
	})
	return _c
}

func (_c *MockDeviceAPI_UpdateDevice_Call) Return(res *Response, err error) *MockDeviceAPI_UpdateDevice_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockDeviceAPI_UpdateDevice_Call) RunAndReturn(run func(context.Context, *UpdateDeviceOpts) (*Response, error)) *MockDeviceAPI_UpdateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeviceAPI creates a new instance of MockDeviceAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeviceAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeviceAPI {
	mock := &MockDeviceAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
