// Code generated by mockery v2.52.2. DO NOT EDIT.

package openapi

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockAPI is an autogenerated mock type for the API type
type MockAPI struct {
	mock.Mock
}

type MockAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPI) EXPECT() *MockAPI_Expecter {
	return &MockAPI_Expecter{mock: &_m.Mock}
}

// CreateDevice provides a mock function with given fields: ctx, opts
func (_m *MockAPI) CreateDevice(ctx context.Context, opts *CreateDeviceOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateDevice")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateDeviceOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateDeviceOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateDeviceOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_CreateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDevice'
type MockAPI_CreateDevice_Call struct {
	*mock.Call
}

// CreateDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *CreateDeviceOpts
func (_e *MockAPI_Expecter) CreateDevice(ctx interface{}, opts interface{}) *MockAPI_CreateDevice_Call {
	return &MockAPI_CreateDevice_Call{Call: _e.mock.On("CreateDevice", ctx, opts)}
}

func (_c *MockAPI_CreateDevice_Call) Run(run func(ctx context.Context, opts *CreateDeviceOpts)) *MockAPI_CreateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateDeviceOpts))
	})
	return _c
}

func (_c *MockAPI_CreateDevice_Call) Return(res *Response, err error) *MockAPI_CreateDevice_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_CreateDevice_Call) RunAndReturn(run func(context.Context, *CreateDeviceOpts) (*Response, error)) *MockAPI_CreateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDeviceType provides a mock function with given fields: ctx, opts
func (_m *MockAPI) CreateDeviceType(ctx context.Context, opts *CreateDeviceTypeOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeviceType")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateDeviceTypeOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateDeviceTypeOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateDeviceTypeOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_CreateDeviceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeviceType'
type MockAPI_CreateDeviceType_Call struct {
	*mock.Call
}

// CreateDeviceType is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *CreateDeviceTypeOpts
func (_e *MockAPI_Expecter) CreateDeviceType(ctx interface{}, opts interface{}) *MockAPI_CreateDeviceType_Call {
	return &MockAPI_CreateDeviceType_Call{Call: _e.mock.On("CreateDeviceType", ctx, opts)}
}

func (_c *MockAPI_CreateDeviceType_Call) Run(run func(ctx context.Context, opts *CreateDeviceTypeOpts)) *MockAPI_CreateDeviceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateDeviceTypeOpts))
	})
	return _c
}

func (_c *MockAPI_CreateDeviceType_Call) Return(res *Response, err error) *MockAPI_CreateDeviceType_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_CreateDeviceType_Call) RunAndReturn(run func(context.Context, *CreateDeviceTypeOpts) (*Response, error)) *MockAPI_CreateDeviceType_Call {
	_c.Call.Return(run)
	return _c
}

// CreateManufacturer provides a mock function with given fields: ctx, opts
func (_m *MockAPI) CreateManufacturer(ctx context.Context, opts *CreateManufacturerOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateManufacturer")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateManufacturerOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateManufacturerOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateManufacturerOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_CreateManufacturer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateManufacturer'
type MockAPI_CreateManufacturer_Call struct {
	*mock.Call
}

// CreateManufacturer is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *CreateManufacturerOpts
func (_e *MockAPI_Expecter) CreateManufacturer(ctx interface{}, opts interface{}) *MockAPI_CreateManufacturer_Call {
	return &MockAPI_CreateManufacturer_Call{Call: _e.mock.On("CreateManufacturer", ctx, opts)}
}

func (_c *MockAPI_CreateManufacturer_Call) Run(run func(ctx context.Context, opts *CreateManufacturerOpts)) *MockAPI_CreateManufacturer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateManufacturerOpts))
	})
	return _c
}

func (_c *MockAPI_CreateManufacturer_Call) Return(res *Response, err error) *MockAPI_CreateManufacturer_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_CreateManufacturer_Call) RunAndReturn(run func(context.Context, *CreateManufacturerOpts) (*Response, error)) *MockAPI_CreateManufacturer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, opts
func (_m *MockAPI) CreateUser(ctx context.Context, opts *CreateUserOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateUserOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateUserOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateUserOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockAPI_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *CreateUserOpts
func (_e *MockAPI_Expecter) CreateUser(ctx interface{}, opts interface{}) *MockAPI_CreateUser_Call {
	return &MockAPI_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, opts)}
}

func (_c *MockAPI_CreateUser_Call) Run(run func(ctx context.Context, opts *CreateUserOpts)) *MockAPI_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateUserOpts))
	})
	return _c
}

func (_c *MockAPI_CreateUser_Call) Return(res *Response, err error) *MockAPI_CreateUser_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_CreateUser_Call) RunAndReturn(run func(context.Context, *CreateUserOpts) (*Response, error)) *MockAPI_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDevice provides a mock function with given fields: ctx, opts
func (_m *MockAPI) DeleteDevice(ctx context.Context, opts *DeleteDeviceOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDevice")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteDeviceOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteDeviceOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DeleteDeviceOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_DeleteDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDevice'
type MockAPI_DeleteDevice_Call struct {
	*mock.Call
}

// DeleteDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *DeleteDeviceOpts
func (_e *MockAPI_Expecter) DeleteDevice(ctx interface{}, opts interface{}) *MockAPI_DeleteDevice_Call {
	return &MockAPI_DeleteDevice_Call{Call: _e.mock.On("DeleteDevice", ctx, opts)}
}

func (_c *MockAPI_DeleteDevice_Call) Run(run func(ctx context.Context, opts *DeleteDeviceOpts)) *MockAPI_DeleteDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteDeviceOpts))
	})
	return _c
}

func (_c *MockAPI_DeleteDevice_Call) Return(res *Response, err error) *MockAPI_DeleteDevice_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_DeleteDevice_Call) RunAndReturn(run func(context.Context, *DeleteDeviceOpts) (*Response, error)) *MockAPI_DeleteDevice_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeviceType provides a mock function with given fields: ctx, opts
func (_m *MockAPI) DeleteDeviceType(ctx context.Context, opts *DeleteDeviceTypeOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceType")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteDeviceTypeOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteDeviceTypeOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DeleteDeviceTypeOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_DeleteDeviceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeviceType'
type MockAPI_DeleteDeviceType_Call struct {
	*mock.Call
}

// DeleteDeviceType is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *DeleteDeviceTypeOpts
func (_e *MockAPI_Expecter) DeleteDeviceType(ctx interface{}, opts interface{}) *MockAPI_DeleteDeviceType_Call {
	return &MockAPI_DeleteDeviceType_Call{Call: _e.mock.On("DeleteDeviceType", ctx, opts)}
}

func (_c *MockAPI_DeleteDeviceType_Call) Run(run func(ctx context.Context, opts *DeleteDeviceTypeOpts)) *MockAPI_DeleteDeviceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteDeviceTypeOpts))
	})
	return _c
}

func (_c *MockAPI_DeleteDeviceType_Call) Return(res *Response, err error) *MockAPI_DeleteDeviceType_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_DeleteDeviceType_Call) RunAndReturn(run func(context.Context, *DeleteDeviceTypeOpts) (*Response, error)) *MockAPI_DeleteDeviceType_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManufacturer provides a mock function with given fields: ctx, opts
func (_m *MockAPI) DeleteManufacturer(ctx context.Context, opts *DeleteManufacturerOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManufacturer")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteManufacturerOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteManufacturerOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DeleteManufacturerOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_DeleteManufacturer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManufacturer'
type MockAPI_DeleteManufacturer_Call struct {
	*mock.Call
}

// DeleteManufacturer is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *DeleteManufacturerOpts
func (_e *MockAPI_Expecter) DeleteManufacturer(ctx interface{}, opts interface{}) *MockAPI_DeleteManufacturer_Call {
	return &MockAPI_DeleteManufacturer_Call{Call: _e.mock.On("DeleteManufacturer", ctx, opts)}
}

func (_c *MockAPI_DeleteManufacturer_Call) Run(run func(ctx context.Context, opts *DeleteManufacturerOpts)) *MockAPI_DeleteManufacturer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteManufacturerOpts))
	})
	return _c
}

func (_c *MockAPI_DeleteManufacturer_Call) Return(res *Response, err error) *MockAPI_DeleteManufacturer_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_DeleteManufacturer_Call) RunAndReturn(run func(context.Context, *DeleteManufacturerOpts) (*Response, error)) *MockAPI_DeleteManufacturer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, opts
func (_m *MockAPI) DeleteUser(ctx context.Context, opts *DeleteUserOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteUserOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteUserOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DeleteUserOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockAPI_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *DeleteUserOpts
func (_e *MockAPI_Expecter) DeleteUser(ctx interface{}, opts interface{}) *MockAPI_DeleteUser_Call {
	return &MockAPI_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, opts)}
}

func (_c *MockAPI_DeleteUser_Call) Run(run func(ctx context.Context, opts *DeleteUserOpts)) *MockAPI_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteUserOpts))
	})
	return _c
}

func (_c *MockAPI_DeleteUser_Call) Return(res *Response, err error) *MockAPI_DeleteUser_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_DeleteUser_Call) RunAndReturn(run func(context.Context, *DeleteUserOpts) (*Response, error)) *MockAPI_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// ErrorHandler provides a mock function with given fields: w, r, err
func (_m *MockAPI) ErrorHandler(w http.ResponseWriter, r *http.Request, err error) {
	_m.Called(w, r, err)
}

// MockAPI_ErrorHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorHandler'
type MockAPI_ErrorHandler_Call struct {
	*mock.Call
}

// ErrorHandler is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - err error
func (_e *MockAPI_Expecter) ErrorHandler(w interface{}, r interface{}, err interface{}) *MockAPI_ErrorHandler_Call {
	return &MockAPI_ErrorHandler_Call{Call: _e.mock.On("ErrorHandler", w, r, err)}
}

func (_c *MockAPI_ErrorHandler_Call) Run(run func(w http.ResponseWriter, r *http.Request, err error)) *MockAPI_ErrorHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(error))
	})
	return _c
}

func (_c *MockAPI_ErrorHandler_Call) Return() *MockAPI_ErrorHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAPI_ErrorHandler_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, error)) *MockAPI_ErrorHandler_Call {
	_c.Run(run)
	return _c
}

// GetCurrentUser provides a mock function with given fields: ctx
func (_m *MockAPI) GetCurrentUser(ctx context.Context) (*Response, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUser")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetCurrentUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUser'
type MockAPI_GetCurrentUser_Call struct {
	*mock.Call
}

// GetCurrentUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPI_Expecter) GetCurrentUser(ctx interface{}) *MockAPI_GetCurrentUser_Call {
	return &MockAPI_GetCurrentUser_Call{Call: _e.mock.On("GetCurrentUser", ctx)}
}

func (_c *MockAPI_GetCurrentUser_Call) Run(run func(ctx context.Context)) *MockAPI_GetCurrentUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPI_GetCurrentUser_Call) Return(res *Response, err error) *MockAPI_GetCurrentUser_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_GetCurrentUser_Call) RunAndReturn(run func(context.Context) (*Response, error)) *MockAPI_GetCurrentUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevice provides a mock function with given fields: ctx, opts
func (_m *MockAPI) GetDevice(ctx context.Context, opts *GetDeviceOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetDevice")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetDeviceOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetDeviceOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetDeviceOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevice'
type MockAPI_GetDevice_Call struct {
	*mock.Call
}

// GetDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *GetDeviceOpts
func (_e *MockAPI_Expecter) GetDevice(ctx interface{}, opts interface{}) *MockAPI_GetDevice_Call {
	return &MockAPI_GetDevice_Call{Call: _e.mock.On("GetDevice", ctx, opts)}
}

func (_c *MockAPI_GetDevice_Call) Run(run func(ctx context.Context, opts *GetDeviceOpts)) *MockAPI_GetDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetDeviceOpts))
	})
	return _c
}

func (_c *MockAPI_GetDevice_Call) Return(res *Response, err error) *MockAPI_GetDevice_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_GetDevice_Call) RunAndReturn(run func(context.Context, *GetDeviceOpts) (*Response, error)) *MockAPI_GetDevice_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceType provides a mock function with given fields: ctx, opts
func (_m *MockAPI) GetDeviceType(ctx context.Context, opts *GetDeviceTypeOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceType")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetDeviceTypeOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetDeviceTypeOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetDeviceTypeOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetDeviceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceType'
type MockAPI_GetDeviceType_Call struct {
	*mock.Call
}

// GetDeviceType is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *GetDeviceTypeOpts
func (_e *MockAPI_Expecter) GetDeviceType(ctx interface{}, opts interface{}) *MockAPI_GetDeviceType_Call {
	return &MockAPI_GetDeviceType_Call{Call: _e.mock.On("GetDeviceType", ctx, opts)}
}

func (_c *MockAPI_GetDeviceType_Call) Run(run func(ctx context.Context, opts *GetDeviceTypeOpts)) *MockAPI_GetDeviceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetDeviceTypeOpts))
	})
	return _c
}

func (_c *MockAPI_GetDeviceType_Call) Return(res *Response, err error) *MockAPI_GetDeviceType_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_GetDeviceType_Call) RunAndReturn(run func(context.Context, *GetDeviceTypeOpts) (*Response, error)) *MockAPI_GetDeviceType_Call {
	_c.Call.Return(run)
	return _c
}

// GetManufacturer provides a mock function with given fields: ctx, opts
func (_m *MockAPI) GetManufacturer(ctx context.Context, opts *GetManufacturerOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetManufacturer")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetManufacturerOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetManufacturerOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetManufacturerOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetManufacturer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManufacturer'
type MockAPI_GetManufacturer_Call struct {
	*mock.Call
}

// GetManufacturer is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *GetManufacturerOpts
func (_e *MockAPI_Expecter) GetManufacturer(ctx interface{}, opts interface{}) *MockAPI_GetManufacturer_Call {
	return &MockAPI_GetManufacturer_Call{Call: _e.mock.On("GetManufacturer", ctx, opts)}
}

func (_c *MockAPI_GetManufacturer_Call) Run(run func(ctx context.Context, opts *GetManufacturerOpts)) *MockAPI_GetManufacturer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetManufacturerOpts))
	})
	return _c
}

func (_c *MockAPI_GetManufacturer_Call) Return(res *Response, err error) *MockAPI_GetManufacturer_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_GetManufacturer_Call) RunAndReturn(run func(context.Context, *GetManufacturerOpts) (*Response, error)) *MockAPI_GetManufacturer_Call {
	_c.Call.Return(run)
	return _c
}

// GetStats provides a mock function with given fields: ctx
func (_m *MockAPI) GetStats(ctx context.Context) (*Response, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type MockAPI_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPI_Expecter) GetStats(ctx interface{}) *MockAPI_GetStats_Call {
	return &MockAPI_GetStats_Call{Call: _e.mock.On("GetStats", ctx)}
}

func (_c *MockAPI_GetStats_Call) Run(run func(ctx context.Context)) *MockAPI_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPI_GetStats_Call) Return(res *Response, err error) *MockAPI_GetStats_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_GetStats_Call) RunAndReturn(run func(context.Context) (*Response, error)) *MockAPI_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, opts
func (_m *MockAPI) GetUser(ctx context.Context, opts *GetUserOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetUserOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetUserOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetUserOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockAPI_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *GetUserOpts
func (_e *MockAPI_Expecter) GetUser(ctx interface{}, opts interface{}) *MockAPI_GetUser_Call {
	return &MockAPI_GetUser_Call{Call: _e.mock.On("GetUser", ctx, opts)}
}

func (_c *MockAPI_GetUser_Call) Run(run func(ctx context.Context, opts *GetUserOpts)) *MockAPI_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetUserOpts))
	})
	return _c
}

func (_c *MockAPI_GetUser_Call) Return(res *Response, err error) *MockAPI_GetUser_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_GetUser_Call) RunAndReturn(run func(context.Context, *GetUserOpts) (*Response, error)) *MockAPI_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserProviders provides a mock function with given fields: ctx
func (_m *MockAPI) GetUserProviders(ctx context.Context) (*Response, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProviders")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetUserProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProviders'
type MockAPI_GetUserProviders_Call struct {
	*mock.Call
}

// GetUserProviders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPI_Expecter) GetUserProviders(ctx interface{}) *MockAPI_GetUserProviders_Call {
	return &MockAPI_GetUserProviders_Call{Call: _e.mock.On("GetUserProviders", ctx)}
}

func (_c *MockAPI_GetUserProviders_Call) Run(run func(ctx context.Context)) *MockAPI_GetUserProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPI_GetUserProviders_Call) Return(res *Response, err error) *MockAPI_GetUserProviders_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_GetUserProviders_Call) RunAndReturn(run func(context.Context) (*Response, error)) *MockAPI_GetUserProviders_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeviceTypes provides a mock function with given fields: ctx, opts
func (_m *MockAPI) ListDeviceTypes(ctx context.Context, opts *ListDeviceTypesOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListDeviceTypes")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListDeviceTypesOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListDeviceTypesOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListDeviceTypesOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_ListDeviceTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeviceTypes'
type MockAPI_ListDeviceTypes_Call struct {
	*mock.Call
}

// ListDeviceTypes is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *ListDeviceTypesOpts
func (_e *MockAPI_Expecter) ListDeviceTypes(ctx interface{}, opts interface{}) *MockAPI_ListDeviceTypes_Call {
	return &MockAPI_ListDeviceTypes_Call{Call: _e.mock.On("ListDeviceTypes", ctx, opts)}
}

func (_c *MockAPI_ListDeviceTypes_Call) Run(run func(ctx context.Context, opts *ListDeviceTypesOpts)) *MockAPI_ListDeviceTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListDeviceTypesOpts))
	})
	return _c
}

func (_c *MockAPI_ListDeviceTypes_Call) Return(res *Response, err error) *MockAPI_ListDeviceTypes_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_ListDeviceTypes_Call) RunAndReturn(run func(context.Context, *ListDeviceTypesOpts) (*Response, error)) *MockAPI_ListDeviceTypes_Call {
	_c.Call.Return(run)
	return _c
}

// ListDevices provides a mock function with given fields: ctx, opts
func (_m *MockAPI) ListDevices(ctx context.Context, opts *ListDevicesOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListDevices")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListDevicesOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListDevicesOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListDevicesOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_ListDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDevices'
type MockAPI_ListDevices_Call struct {
	*mock.Call
}

// ListDevices is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *ListDevicesOpts
func (_e *MockAPI_Expecter) ListDevices(ctx interface{}, opts interface{}) *MockAPI_ListDevices_Call {
	return &MockAPI_ListDevices_Call{Call: _e.mock.On("ListDevices", ctx, opts)}
}

func (_c *MockAPI_ListDevices_Call) Run(run func(ctx context.Context, opts *ListDevicesOpts)) *MockAPI_ListDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListDevicesOpts))
	})
	return _c
}

func (_c *MockAPI_ListDevices_Call) Return(res *Response, err error) *MockAPI_ListDevices_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_ListDevices_Call) RunAndReturn(run func(context.Context, *ListDevicesOpts) (*Response, error)) *MockAPI_ListDevices_Call {
	_c.Call.Return(run)
	return _c
}

// ListManufacturers provides a mock function with given fields: ctx, opts
func (_m *MockAPI) ListManufacturers(ctx context.Context, opts *ListManufacturersOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListManufacturers")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListManufacturersOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListManufacturersOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListManufacturersOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_ListManufacturers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListManufacturers'
type MockAPI_ListManufacturers_Call struct {
	*mock.Call
}

// ListManufacturers is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *ListManufacturersOpts
func (_e *MockAPI_Expecter) ListManufacturers(ctx interface{}, opts interface{}) *MockAPI_ListManufacturers_Call {
	return &MockAPI_ListManufacturers_Call{Call: _e.mock.On("ListManufacturers", ctx, opts)}
}

func (_c *MockAPI_ListManufacturers_Call) Run(run func(ctx context.Context, opts *ListManufacturersOpts)) *MockAPI_ListManufacturers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListManufacturersOpts))
	})
	return _c
}

func (_c *MockAPI_ListManufacturers_Call) Return(res *Response, err error) *MockAPI_ListManufacturers_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_ListManufacturers_Call) RunAndReturn(run func(context.Context, *ListManufacturersOpts) (*Response, error)) *MockAPI_ListManufacturers_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, opts
func (_m *MockAPI) ListUsers(ctx context.Context, opts *ListUsersOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListUsersOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListUsersOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListUsersOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockAPI_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *ListUsersOpts
func (_e *MockAPI_Expecter) ListUsers(ctx interface{}, opts interface{}) *MockAPI_ListUsers_Call {
	return &MockAPI_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, opts)}
}

func (_c *MockAPI_ListUsers_Call) Run(run func(ctx context.Context, opts *ListUsersOpts)) *MockAPI_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListUsersOpts))
	})
	return _c
}

func (_c *MockAPI_ListUsers_Call) Return(res *Response, err error) *MockAPI_ListUsers_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_ListUsers_Call) RunAndReturn(run func(context.Context, *ListUsersOpts) (*Response, error)) *MockAPI_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDevice provides a mock function with given fields: ctx, opts
func (_m *MockAPI) UpdateDevice(ctx context.Context, opts *UpdateDeviceOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevice")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateDeviceOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateDeviceOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpdateDeviceOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_UpdateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDevice'
type MockAPI_UpdateDevice_Call struct {
	*mock.Call
}

// UpdateDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *UpdateDeviceOpts
func (_e *MockAPI_Expecter) UpdateDevice(ctx interface{}, opts interface{}) *MockAPI_UpdateDevice_Call {
	return &MockAPI_UpdateDevice_Call{Call: _e.mock.On("UpdateDevice", ctx, opts)}
}

func (_c *MockAPI_UpdateDevice_Call) Run(run func(ctx context.Context, opts *UpdateDeviceOpts)) *MockAPI_UpdateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*UpdateDeviceOpts))
	})
	return _c
}

func (_c *MockAPI_UpdateDevice_Call) Return(res *Response, err error) *MockAPI_UpdateDevice_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_UpdateDevice_Call) RunAndReturn(run func(context.Context, *UpdateDeviceOpts) (*Response, error)) *MockAPI_UpdateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeviceType provides a mock function with given fields: ctx, opts
func (_m *MockAPI) UpdateDeviceType(ctx context.Context, opts *UpdateDeviceTypeOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceType")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateDeviceTypeOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateDeviceTypeOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpdateDeviceTypeOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_UpdateDeviceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeviceType'
type MockAPI_UpdateDeviceType_Call struct {
	*mock.Call
}

// UpdateDeviceType is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *UpdateDeviceTypeOpts
func (_e *MockAPI_Expecter) UpdateDeviceType(ctx interface{}, opts interface{}) *MockAPI_UpdateDeviceType_Call {
	return &MockAPI_UpdateDeviceType_Call{Call: _e.mock.On("UpdateDeviceType", ctx, opts)}
}

func (_c *MockAPI_UpdateDeviceType_Call) Run(run func(ctx context.Context, opts *UpdateDeviceTypeOpts)) *MockAPI_UpdateDeviceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*UpdateDeviceTypeOpts))
	})
	return _c
}

func (_c *MockAPI_UpdateDeviceType_Call) Return(res *Response, err error) *MockAPI_UpdateDeviceType_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_UpdateDeviceType_Call) RunAndReturn(run func(context.Context, *UpdateDeviceTypeOpts) (*Response, error)) *MockAPI_UpdateDeviceType_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateManufacturer provides a mock function with given fields: ctx, opts
func (_m *MockAPI) UpdateManufacturer(ctx context.Context, opts *UpdateManufacturerOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateManufacturer")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateManufacturerOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateManufacturerOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpdateManufacturerOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_UpdateManufacturer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateManufacturer'
type MockAPI_UpdateManufacturer_Call struct {
	*mock.Call
}

// UpdateManufacturer is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *UpdateManufacturerOpts
func (_e *MockAPI_Expecter) UpdateManufacturer(ctx interface{}, opts interface{}) *MockAPI_UpdateManufacturer_Call {
	return &MockAPI_UpdateManufacturer_Call{Call: _e.mock.On("UpdateManufacturer", ctx, opts)}
}

func (_c *MockAPI_UpdateManufacturer_Call) Run(run func(ctx context.Context, opts *UpdateManufacturerOpts)) *MockAPI_UpdateManufacturer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*UpdateManufacturerOpts))
	})
	return _c
}

func (_c *MockAPI_UpdateManufacturer_Call) Return(res *Response, err error) *MockAPI_UpdateManufacturer_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_UpdateManufacturer_Call) RunAndReturn(run func(context.Context, *UpdateManufacturerOpts) (*Response, error)) *MockAPI_UpdateManufacturer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, opts
func (_m *MockAPI) UpdateUser(ctx context.Context, opts *UpdateUserOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateUserOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateUserOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpdateUserOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockAPI_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *UpdateUserOpts
func (_e *MockAPI_Expecter) UpdateUser(ctx interface{}, opts interface{}) *MockAPI_UpdateUser_Call {
	return &MockAPI_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, opts)}
}

func (_c *MockAPI_UpdateUser_Call) Run(run func(ctx context.Context, opts *UpdateUserOpts)) *MockAPI_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*UpdateUserOpts))
	})
	return _c
}

func (_c *MockAPI_UpdateUser_Call) Return(res *Response, err error) *MockAPI_UpdateUser_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockAPI_UpdateUser_Call) RunAndReturn(run func(context.Context, *UpdateUserOpts) (*Response, error)) *MockAPI_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// WriteErrorHandler provides a mock function with given fields: w, r, err
func (_m *MockAPI) WriteErrorHandler(w http.ResponseWriter, r *http.Request, err error) {
	_m.Called(w, r, err)
}

// MockAPI_WriteErrorHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteErrorHandler'
type MockAPI_WriteErrorHandler_Call struct {
	*mock.Call
}

// WriteErrorHandler is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - err error
func (_e *MockAPI_Expecter) WriteErrorHandler(w interface{}, r interface{}, err interface{}) *MockAPI_WriteErrorHandler_Call {
	return &MockAPI_WriteErrorHandler_Call{Call: _e.mock.On("WriteErrorHandler", w, r, err)}
}

func (_c *MockAPI_WriteErrorHandler_Call) Run(run func(w http.ResponseWriter, r *http.Request, err error)) *MockAPI_WriteErrorHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(error))
	})
	return _c
}

func (_c *MockAPI_WriteErrorHandler_Call) Return() *MockAPI_WriteErrorHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAPI_WriteErrorHandler_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, error)) *MockAPI_WriteErrorHandler_Call {
	_c.Run(run)
	return _c
}

// NewMockAPI creates a new instance of MockAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPI {
	mock := &MockAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
