// Code generated by dvnetman. DO NOT EDIT.

package openapi

import (
	"context"
	utils "dvnetman/pkg/utils"
	"encoding/json"
	uuid "github.com/google/uuid"
	mux "github.com/gorilla/mux"
	errors "github.com/pkg/errors"
	"net/http"
	"strconv"
	"time"
)

type UserAPI interface {
	CreateUser(ctx context.Context, opts *CreateUserOpts) (res *Response, err error)
	DeleteUser(ctx context.Context, opts *DeleteUserOpts) (res *Response, err error)
	GetCurrentUser(ctx context.Context) (res *Response, err error)
	GetUser(ctx context.Context, opts *GetUserOpts) (res *Response, err error)
	GetUserProviders(ctx context.Context) (res *Response, err error)
	ListUsers(ctx context.Context, opts *ListUsersOpts) (res *Response, err error)
	UpdateUser(ctx context.Context, opts *UpdateUserOpts) (res *Response, err error)
}
type CreateUserOpts struct {
	Body *User
}
type ListUsersOpts struct {
	Page    *int
	PerPage *int
	Sort    *string
	Body    *UserSearchBody
}
type DeleteUserOpts struct {
	Id uuid.UUID
}
type GetUserOpts struct {
	Id              uuid.UUID
	IfNoneMatch     *string
	IfModifiedSince *time.Time
}
type UpdateUserOpts struct {
	Id   uuid.UUID
	Body *User
}
type UserAPIHandler struct {
	service UserAPI
	errors  ErrorHandler
}

func (h *UserAPIHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &CreateUserOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.errors.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.errors.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.CreateUser(r.Context(), opts); err != nil {
		h.errors.ErrorHandler(w, r, err)
	} else if res == nil {
		h.errors.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.errors.WriteErrorHandler(w, r, err)
	}
}
func (h *UserAPIHandler) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	if res, err = h.service.GetCurrentUser(r.Context()); err != nil {
		h.errors.ErrorHandler(w, r, err)
	} else if res == nil {
		h.errors.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.errors.WriteErrorHandler(w, r, err)
	}
}
func (h *UserAPIHandler) GetUserProviders(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	if res, err = h.service.GetUserProviders(r.Context()); err != nil {
		h.errors.ErrorHandler(w, r, err)
	} else if res == nil {
		h.errors.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.errors.WriteErrorHandler(w, r, err)
	}
}
func (h *UserAPIHandler) ListUsers(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &ListUsersOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.errors.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.errors.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	for k, v := range r.URL.Query() {
		switch k {
		case "page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.errors.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("page", err)))
				return
			}
			opts.Page = utils.ToPtr(x)
		case "per_page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.errors.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("per_page", err)))
				return
			}
			opts.PerPage = utils.ToPtr(x)
		case "sort":
			opts.Sort = utils.ToPtr(v[0])
		}
	}
	if res, err = h.service.ListUsers(r.Context(), opts); err != nil {
		h.errors.ErrorHandler(w, r, err)
	} else if res == nil {
		h.errors.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.errors.WriteErrorHandler(w, r, err)
	}
}
func (h *UserAPIHandler) DeleteUser(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &DeleteUserOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.errors.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	if res, err = h.service.DeleteUser(r.Context(), opts); err != nil {
		h.errors.ErrorHandler(w, r, err)
	} else if res == nil {
		h.errors.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.errors.WriteErrorHandler(w, r, err)
	}
}
func (h *UserAPIHandler) GetUser(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &GetUserOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.errors.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	for k, v := range r.Header {
		switch k {
		case "If-None-Match":
			opts.IfNoneMatch = utils.ToPtr(v[0])
		case "If-Modified-Since":
			var t time.Time
			if t, err = time.Parse(time.RFC1123, v[0]); err != nil {
				h.errors.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("If-Modified-Since", err)))
				return
			}
			opts.IfModifiedSince = utils.ToPtr(t)
		}
	}
	if res, err = h.service.GetUser(r.Context(), opts); err != nil {
		h.errors.ErrorHandler(w, r, err)
	} else if res == nil {
		h.errors.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.errors.WriteErrorHandler(w, r, err)
	}
}
func (h *UserAPIHandler) UpdateUser(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &UpdateUserOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.errors.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.errors.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.errors.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.UpdateUser(r.Context(), opts); err != nil {
		h.errors.ErrorHandler(w, r, err)
	} else if res == nil {
		h.errors.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.errors.WriteErrorHandler(w, r, err)
	}
}
func AttachUserAPI(service UserAPI, errors ErrorHandler, router *mux.Router) {
	handler := &UserAPIHandler{
		errors:  errors,
		service: service,
	}
	router.Methods(http.MethodPost).Path("/api/v1/user").Name("CreateUser").HandlerFunc(handler.CreateUser)
	router.Methods(http.MethodGet).Path("/api/v1/user/current").Name("GetCurrentUser").HandlerFunc(handler.GetCurrentUser)
	router.Methods(http.MethodGet).Path("/api/v1/user/providers").Name("GetUserProviders").HandlerFunc(handler.GetUserProviders)
	router.Methods(http.MethodPost).Path("/api/v1/user/search").Name("ListUsers").HandlerFunc(handler.ListUsers)
	router.Methods(http.MethodDelete).Path("/api/v1/user/{id:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}}").Name("DeleteUser").HandlerFunc(handler.DeleteUser)
	router.Methods(http.MethodGet).Path("/api/v1/user/{id:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}}").Name("GetUser").HandlerFunc(handler.GetUser)
	router.Methods(http.MethodPut).Path("/api/v1/user/{id:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}}").Name("UpdateUser").HandlerFunc(handler.UpdateUser)
}
