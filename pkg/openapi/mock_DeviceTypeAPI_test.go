// Code generated by mockery v2.52.2. DO NOT EDIT.

package openapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDeviceTypeAPI is an autogenerated mock type for the DeviceTypeAPI type
type MockDeviceTypeAPI struct {
	mock.Mock
}

type MockDeviceTypeAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeviceTypeAPI) EXPECT() *MockDeviceTypeAPI_Expecter {
	return &MockDeviceTypeAPI_Expecter{mock: &_m.Mock}
}

// CreateDeviceType provides a mock function with given fields: ctx, opts
func (_m *MockDeviceTypeAPI) CreateDeviceType(ctx context.Context, opts *CreateDeviceTypeOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeviceType")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateDeviceTypeOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateDeviceTypeOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateDeviceTypeOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceTypeAPI_CreateDeviceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeviceType'
type MockDeviceTypeAPI_CreateDeviceType_Call struct {
	*mock.Call
}

// CreateDeviceType is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *CreateDeviceTypeOpts
func (_e *MockDeviceTypeAPI_Expecter) CreateDeviceType(ctx interface{}, opts interface{}) *MockDeviceTypeAPI_CreateDeviceType_Call {
	return &MockDeviceTypeAPI_CreateDeviceType_Call{Call: _e.mock.On("CreateDeviceType", ctx, opts)}
}

func (_c *MockDeviceTypeAPI_CreateDeviceType_Call) Run(run func(ctx context.Context, opts *CreateDeviceTypeOpts)) *MockDeviceTypeAPI_CreateDeviceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateDeviceTypeOpts))
	})
	return _c
}

func (_c *MockDeviceTypeAPI_CreateDeviceType_Call) Return(res *Response, err error) *MockDeviceTypeAPI_CreateDeviceType_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockDeviceTypeAPI_CreateDeviceType_Call) RunAndReturn(run func(context.Context, *CreateDeviceTypeOpts) (*Response, error)) *MockDeviceTypeAPI_CreateDeviceType_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeviceType provides a mock function with given fields: ctx, opts
func (_m *MockDeviceTypeAPI) DeleteDeviceType(ctx context.Context, opts *DeleteDeviceTypeOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceType")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteDeviceTypeOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteDeviceTypeOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DeleteDeviceTypeOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceTypeAPI_DeleteDeviceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeviceType'
type MockDeviceTypeAPI_DeleteDeviceType_Call struct {
	*mock.Call
}

// DeleteDeviceType is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *DeleteDeviceTypeOpts
func (_e *MockDeviceTypeAPI_Expecter) DeleteDeviceType(ctx interface{}, opts interface{}) *MockDeviceTypeAPI_DeleteDeviceType_Call {
	return &MockDeviceTypeAPI_DeleteDeviceType_Call{Call: _e.mock.On("DeleteDeviceType", ctx, opts)}
}

func (_c *MockDeviceTypeAPI_DeleteDeviceType_Call) Run(run func(ctx context.Context, opts *DeleteDeviceTypeOpts)) *MockDeviceTypeAPI_DeleteDeviceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteDeviceTypeOpts))
	})
	return _c
}

func (_c *MockDeviceTypeAPI_DeleteDeviceType_Call) Return(res *Response, err error) *MockDeviceTypeAPI_DeleteDeviceType_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockDeviceTypeAPI_DeleteDeviceType_Call) RunAndReturn(run func(context.Context, *DeleteDeviceTypeOpts) (*Response, error)) *MockDeviceTypeAPI_DeleteDeviceType_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceType provides a mock function with given fields: ctx, opts
func (_m *MockDeviceTypeAPI) GetDeviceType(ctx context.Context, opts *GetDeviceTypeOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceType")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetDeviceTypeOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetDeviceTypeOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetDeviceTypeOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceTypeAPI_GetDeviceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceType'
type MockDeviceTypeAPI_GetDeviceType_Call struct {
	*mock.Call
}

// GetDeviceType is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *GetDeviceTypeOpts
func (_e *MockDeviceTypeAPI_Expecter) GetDeviceType(ctx interface{}, opts interface{}) *MockDeviceTypeAPI_GetDeviceType_Call {
	return &MockDeviceTypeAPI_GetDeviceType_Call{Call: _e.mock.On("GetDeviceType", ctx, opts)}
}

func (_c *MockDeviceTypeAPI_GetDeviceType_Call) Run(run func(ctx context.Context, opts *GetDeviceTypeOpts)) *MockDeviceTypeAPI_GetDeviceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetDeviceTypeOpts))
	})
	return _c
}

func (_c *MockDeviceTypeAPI_GetDeviceType_Call) Return(res *Response, err error) *MockDeviceTypeAPI_GetDeviceType_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockDeviceTypeAPI_GetDeviceType_Call) RunAndReturn(run func(context.Context, *GetDeviceTypeOpts) (*Response, error)) *MockDeviceTypeAPI_GetDeviceType_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeviceTypes provides a mock function with given fields: ctx, opts
func (_m *MockDeviceTypeAPI) ListDeviceTypes(ctx context.Context, opts *ListDeviceTypesOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListDeviceTypes")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListDeviceTypesOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListDeviceTypesOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListDeviceTypesOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceTypeAPI_ListDeviceTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeviceTypes'
type MockDeviceTypeAPI_ListDeviceTypes_Call struct {
	*mock.Call
}

// ListDeviceTypes is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *ListDeviceTypesOpts
func (_e *MockDeviceTypeAPI_Expecter) ListDeviceTypes(ctx interface{}, opts interface{}) *MockDeviceTypeAPI_ListDeviceTypes_Call {
	return &MockDeviceTypeAPI_ListDeviceTypes_Call{Call: _e.mock.On("ListDeviceTypes", ctx, opts)}
}

func (_c *MockDeviceTypeAPI_ListDeviceTypes_Call) Run(run func(ctx context.Context, opts *ListDeviceTypesOpts)) *MockDeviceTypeAPI_ListDeviceTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListDeviceTypesOpts))
	})
	return _c
}

func (_c *MockDeviceTypeAPI_ListDeviceTypes_Call) Return(res *Response, err error) *MockDeviceTypeAPI_ListDeviceTypes_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockDeviceTypeAPI_ListDeviceTypes_Call) RunAndReturn(run func(context.Context, *ListDeviceTypesOpts) (*Response, error)) *MockDeviceTypeAPI_ListDeviceTypes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeviceType provides a mock function with given fields: ctx, opts
func (_m *MockDeviceTypeAPI) UpdateDeviceType(ctx context.Context, opts *UpdateDeviceTypeOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceType")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateDeviceTypeOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateDeviceTypeOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpdateDeviceTypeOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceTypeAPI_UpdateDeviceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeviceType'
type MockDeviceTypeAPI_UpdateDeviceType_Call struct {
	*mock.Call
}

// UpdateDeviceType is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *UpdateDeviceTypeOpts
func (_e *MockDeviceTypeAPI_Expecter) UpdateDeviceType(ctx interface{}, opts interface{}) *MockDeviceTypeAPI_UpdateDeviceType_Call {
	return &MockDeviceTypeAPI_UpdateDeviceType_Call{Call: _e.mock.On("UpdateDeviceType", ctx, opts)}
}

func (_c *MockDeviceTypeAPI_UpdateDeviceType_Call) Run(run func(ctx context.Context, opts *UpdateDeviceTypeOpts)) *MockDeviceTypeAPI_UpdateDeviceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*UpdateDeviceTypeOpts))
	})
	return _c
}

func (_c *MockDeviceTypeAPI_UpdateDeviceType_Call) Return(res *Response, err error) *MockDeviceTypeAPI_UpdateDeviceType_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockDeviceTypeAPI_UpdateDeviceType_Call) RunAndReturn(run func(context.Context, *UpdateDeviceTypeOpts) (*Response, error)) *MockDeviceTypeAPI_UpdateDeviceType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeviceTypeAPI creates a new instance of MockDeviceTypeAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeviceTypeAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeviceTypeAPI {
	mock := &MockDeviceTypeAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
