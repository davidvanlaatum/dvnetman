// Code generated by mockery v2.52.2. DO NOT EDIT.

package openapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSiteAPI is an autogenerated mock type for the SiteAPI type
type MockSiteAPI struct {
	mock.Mock
}

type MockSiteAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSiteAPI) EXPECT() *MockSiteAPI_Expecter {
	return &MockSiteAPI_Expecter{mock: &_m.Mock}
}

// CreateSite provides a mock function with given fields: ctx, opts
func (_m *MockSiteAPI) CreateSite(ctx context.Context, opts *CreateSiteOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateSite")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateSiteOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateSiteOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateSiteOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSiteAPI_CreateSite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSite'
type MockSiteAPI_CreateSite_Call struct {
	*mock.Call
}

// CreateSite is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *CreateSiteOpts
func (_e *MockSiteAPI_Expecter) CreateSite(ctx interface{}, opts interface{}) *MockSiteAPI_CreateSite_Call {
	return &MockSiteAPI_CreateSite_Call{Call: _e.mock.On("CreateSite", ctx, opts)}
}

func (_c *MockSiteAPI_CreateSite_Call) Run(run func(ctx context.Context, opts *CreateSiteOpts)) *MockSiteAPI_CreateSite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateSiteOpts))
	})
	return _c
}

func (_c *MockSiteAPI_CreateSite_Call) Return(res *Response, err error) *MockSiteAPI_CreateSite_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockSiteAPI_CreateSite_Call) RunAndReturn(run func(context.Context, *CreateSiteOpts) (*Response, error)) *MockSiteAPI_CreateSite_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSite provides a mock function with given fields: ctx, opts
func (_m *MockSiteAPI) DeleteSite(ctx context.Context, opts *DeleteSiteOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSite")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteSiteOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteSiteOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DeleteSiteOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSiteAPI_DeleteSite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSite'
type MockSiteAPI_DeleteSite_Call struct {
	*mock.Call
}

// DeleteSite is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *DeleteSiteOpts
func (_e *MockSiteAPI_Expecter) DeleteSite(ctx interface{}, opts interface{}) *MockSiteAPI_DeleteSite_Call {
	return &MockSiteAPI_DeleteSite_Call{Call: _e.mock.On("DeleteSite", ctx, opts)}
}

func (_c *MockSiteAPI_DeleteSite_Call) Run(run func(ctx context.Context, opts *DeleteSiteOpts)) *MockSiteAPI_DeleteSite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteSiteOpts))
	})
	return _c
}

func (_c *MockSiteAPI_DeleteSite_Call) Return(res *Response, err error) *MockSiteAPI_DeleteSite_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockSiteAPI_DeleteSite_Call) RunAndReturn(run func(context.Context, *DeleteSiteOpts) (*Response, error)) *MockSiteAPI_DeleteSite_Call {
	_c.Call.Return(run)
	return _c
}

// GetSite provides a mock function with given fields: ctx, opts
func (_m *MockSiteAPI) GetSite(ctx context.Context, opts *GetSiteOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetSite")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetSiteOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetSiteOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetSiteOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSiteAPI_GetSite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSite'
type MockSiteAPI_GetSite_Call struct {
	*mock.Call
}

// GetSite is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *GetSiteOpts
func (_e *MockSiteAPI_Expecter) GetSite(ctx interface{}, opts interface{}) *MockSiteAPI_GetSite_Call {
	return &MockSiteAPI_GetSite_Call{Call: _e.mock.On("GetSite", ctx, opts)}
}

func (_c *MockSiteAPI_GetSite_Call) Run(run func(ctx context.Context, opts *GetSiteOpts)) *MockSiteAPI_GetSite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetSiteOpts))
	})
	return _c
}

func (_c *MockSiteAPI_GetSite_Call) Return(res *Response, err error) *MockSiteAPI_GetSite_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockSiteAPI_GetSite_Call) RunAndReturn(run func(context.Context, *GetSiteOpts) (*Response, error)) *MockSiteAPI_GetSite_Call {
	_c.Call.Return(run)
	return _c
}

// ListSites provides a mock function with given fields: ctx, opts
func (_m *MockSiteAPI) ListSites(ctx context.Context, opts *ListSitesOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListSites")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListSitesOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListSitesOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListSitesOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSiteAPI_ListSites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSites'
type MockSiteAPI_ListSites_Call struct {
	*mock.Call
}

// ListSites is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *ListSitesOpts
func (_e *MockSiteAPI_Expecter) ListSites(ctx interface{}, opts interface{}) *MockSiteAPI_ListSites_Call {
	return &MockSiteAPI_ListSites_Call{Call: _e.mock.On("ListSites", ctx, opts)}
}

func (_c *MockSiteAPI_ListSites_Call) Run(run func(ctx context.Context, opts *ListSitesOpts)) *MockSiteAPI_ListSites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListSitesOpts))
	})
	return _c
}

func (_c *MockSiteAPI_ListSites_Call) Return(res *Response, err error) *MockSiteAPI_ListSites_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockSiteAPI_ListSites_Call) RunAndReturn(run func(context.Context, *ListSitesOpts) (*Response, error)) *MockSiteAPI_ListSites_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSite provides a mock function with given fields: ctx, opts
func (_m *MockSiteAPI) UpdateSite(ctx context.Context, opts *UpdateSiteOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSite")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateSiteOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateSiteOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpdateSiteOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSiteAPI_UpdateSite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSite'
type MockSiteAPI_UpdateSite_Call struct {
	*mock.Call
}

// UpdateSite is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *UpdateSiteOpts
func (_e *MockSiteAPI_Expecter) UpdateSite(ctx interface{}, opts interface{}) *MockSiteAPI_UpdateSite_Call {
	return &MockSiteAPI_UpdateSite_Call{Call: _e.mock.On("UpdateSite", ctx, opts)}
}

func (_c *MockSiteAPI_UpdateSite_Call) Run(run func(ctx context.Context, opts *UpdateSiteOpts)) *MockSiteAPI_UpdateSite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*UpdateSiteOpts))
	})
	return _c
}

func (_c *MockSiteAPI_UpdateSite_Call) Return(res *Response, err error) *MockSiteAPI_UpdateSite_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockSiteAPI_UpdateSite_Call) RunAndReturn(run func(context.Context, *UpdateSiteOpts) (*Response, error)) *MockSiteAPI_UpdateSite_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSiteAPI creates a new instance of MockSiteAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSiteAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSiteAPI {
	mock := &MockSiteAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
