// Code generated by mockery v2.52.2. DO NOT EDIT.

package openapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockLocationAPI is an autogenerated mock type for the LocationAPI type
type MockLocationAPI struct {
	mock.Mock
}

type MockLocationAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocationAPI) EXPECT() *MockLocationAPI_Expecter {
	return &MockLocationAPI_Expecter{mock: &_m.Mock}
}

// CreateLocation provides a mock function with given fields: ctx, opts
func (_m *MockLocationAPI) CreateLocation(ctx context.Context, opts *CreateLocationOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocation")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateLocationOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateLocationOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateLocationOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocationAPI_CreateLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLocation'
type MockLocationAPI_CreateLocation_Call struct {
	*mock.Call
}

// CreateLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *CreateLocationOpts
func (_e *MockLocationAPI_Expecter) CreateLocation(ctx interface{}, opts interface{}) *MockLocationAPI_CreateLocation_Call {
	return &MockLocationAPI_CreateLocation_Call{Call: _e.mock.On("CreateLocation", ctx, opts)}
}

func (_c *MockLocationAPI_CreateLocation_Call) Run(run func(ctx context.Context, opts *CreateLocationOpts)) *MockLocationAPI_CreateLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateLocationOpts))
	})
	return _c
}

func (_c *MockLocationAPI_CreateLocation_Call) Return(res *Response, err error) *MockLocationAPI_CreateLocation_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockLocationAPI_CreateLocation_Call) RunAndReturn(run func(context.Context, *CreateLocationOpts) (*Response, error)) *MockLocationAPI_CreateLocation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLocation provides a mock function with given fields: ctx, opts
func (_m *MockLocationAPI) DeleteLocation(ctx context.Context, opts *DeleteLocationOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLocation")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteLocationOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteLocationOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DeleteLocationOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocationAPI_DeleteLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLocation'
type MockLocationAPI_DeleteLocation_Call struct {
	*mock.Call
}

// DeleteLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *DeleteLocationOpts
func (_e *MockLocationAPI_Expecter) DeleteLocation(ctx interface{}, opts interface{}) *MockLocationAPI_DeleteLocation_Call {
	return &MockLocationAPI_DeleteLocation_Call{Call: _e.mock.On("DeleteLocation", ctx, opts)}
}

func (_c *MockLocationAPI_DeleteLocation_Call) Run(run func(ctx context.Context, opts *DeleteLocationOpts)) *MockLocationAPI_DeleteLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteLocationOpts))
	})
	return _c
}

func (_c *MockLocationAPI_DeleteLocation_Call) Return(res *Response, err error) *MockLocationAPI_DeleteLocation_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockLocationAPI_DeleteLocation_Call) RunAndReturn(run func(context.Context, *DeleteLocationOpts) (*Response, error)) *MockLocationAPI_DeleteLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocation provides a mock function with given fields: ctx, opts
func (_m *MockLocationAPI) GetLocation(ctx context.Context, opts *GetLocationOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetLocation")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetLocationOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetLocationOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetLocationOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocationAPI_GetLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocation'
type MockLocationAPI_GetLocation_Call struct {
	*mock.Call
}

// GetLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *GetLocationOpts
func (_e *MockLocationAPI_Expecter) GetLocation(ctx interface{}, opts interface{}) *MockLocationAPI_GetLocation_Call {
	return &MockLocationAPI_GetLocation_Call{Call: _e.mock.On("GetLocation", ctx, opts)}
}

func (_c *MockLocationAPI_GetLocation_Call) Run(run func(ctx context.Context, opts *GetLocationOpts)) *MockLocationAPI_GetLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetLocationOpts))
	})
	return _c
}

func (_c *MockLocationAPI_GetLocation_Call) Return(res *Response, err error) *MockLocationAPI_GetLocation_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockLocationAPI_GetLocation_Call) RunAndReturn(run func(context.Context, *GetLocationOpts) (*Response, error)) *MockLocationAPI_GetLocation_Call {
	_c.Call.Return(run)
	return _c
}

// ListLocations provides a mock function with given fields: ctx, opts
func (_m *MockLocationAPI) ListLocations(ctx context.Context, opts *ListLocationsOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListLocations")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListLocationsOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListLocationsOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListLocationsOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocationAPI_ListLocations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLocations'
type MockLocationAPI_ListLocations_Call struct {
	*mock.Call
}

// ListLocations is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *ListLocationsOpts
func (_e *MockLocationAPI_Expecter) ListLocations(ctx interface{}, opts interface{}) *MockLocationAPI_ListLocations_Call {
	return &MockLocationAPI_ListLocations_Call{Call: _e.mock.On("ListLocations", ctx, opts)}
}

func (_c *MockLocationAPI_ListLocations_Call) Run(run func(ctx context.Context, opts *ListLocationsOpts)) *MockLocationAPI_ListLocations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListLocationsOpts))
	})
	return _c
}

func (_c *MockLocationAPI_ListLocations_Call) Return(res *Response, err error) *MockLocationAPI_ListLocations_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockLocationAPI_ListLocations_Call) RunAndReturn(run func(context.Context, *ListLocationsOpts) (*Response, error)) *MockLocationAPI_ListLocations_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLocation provides a mock function with given fields: ctx, opts
func (_m *MockLocationAPI) UpdateLocation(ctx context.Context, opts *UpdateLocationOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocation")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateLocationOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateLocationOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpdateLocationOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocationAPI_UpdateLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLocation'
type MockLocationAPI_UpdateLocation_Call struct {
	*mock.Call
}

// UpdateLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *UpdateLocationOpts
func (_e *MockLocationAPI_Expecter) UpdateLocation(ctx interface{}, opts interface{}) *MockLocationAPI_UpdateLocation_Call {
	return &MockLocationAPI_UpdateLocation_Call{Call: _e.mock.On("UpdateLocation", ctx, opts)}
}

func (_c *MockLocationAPI_UpdateLocation_Call) Run(run func(ctx context.Context, opts *UpdateLocationOpts)) *MockLocationAPI_UpdateLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*UpdateLocationOpts))
	})
	return _c
}

func (_c *MockLocationAPI_UpdateLocation_Call) Return(res *Response, err error) *MockLocationAPI_UpdateLocation_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockLocationAPI_UpdateLocation_Call) RunAndReturn(run func(context.Context, *UpdateLocationOpts) (*Response, error)) *MockLocationAPI_UpdateLocation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLocationAPI creates a new instance of MockLocationAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocationAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocationAPI {
	mock := &MockLocationAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
