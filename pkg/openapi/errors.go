// Code generated by dvnetman. DO NOT EDIT.

package openapi

import (
	logger "dvnetman/pkg/logger"
	"fmt"
	errors "github.com/pkg/errors"
	"net/http"
)

type ErrorConverterFunc func(error) *Response

var errorConverters []ErrorConverterFunc

func RegisterErrorConverter(ec ErrorConverterFunc) {
	errorConverters = append(errorConverters, ec)
}

type ErrorConverter struct{}

func (ec *ErrorConverter) ErrorHandler(w http.ResponseWriter, r *http.Request, err error) {
	for _, converter := range errorConverters {
		if res := converter(err); res != nil {
			if err := res.Write(r, w); err != nil {
				logger.Error(r.Context()).Err(err).Msg("error writing error response")
				return
			}
			return
		}
	}
	logger.Error(r.Context()).Msg("no error converter found")
	http.Error(w, err.Error(), http.StatusInternalServerError)
}

type ErrorHandler interface {
	ErrorHandler(w http.ResponseWriter, r *http.Request, err error)
}
type PathParamError struct {
	name string
	err  error
}

func (e PathParamError) Error() string {
	return fmt.Sprintf("invalid path param %s: %v", e.name, e.err)
}
func NewPathParamError(name string, err error) error {
	return &PathParamError{
		err:  err,
		name: name,
	}
}
func init() {
	RegisterErrorConverter(func(err error) *Response {
		pathParamError := &PathParamError{}
		if ok := errors.As(err, pathParamError); ok {
			return &Response{
				Code: http.StatusBadRequest,
				Object: APIErrorModal{Errors: []*ErrorMessage{{
					Code:    "invalid_path_param",
					Message: err.Error(),
				}}},
			}
		}
		return nil
	})
}

type QueryParamError struct {
	name string
	err  error
}

func (e QueryParamError) Error() string {
	return fmt.Sprintf("invalid Query param %s: %v", e.name, e.err)
}
func NewQueryParamError(name string, err error) error {
	return &QueryParamError{
		err:  err,
		name: name,
	}
}
func init() {
	RegisterErrorConverter(func(err error) *Response {
		queryParamError := &QueryParamError{}
		if ok := errors.As(err, queryParamError); ok {
			return &Response{
				Code: http.StatusBadRequest,
				Object: APIErrorModal{Errors: []*ErrorMessage{{
					Code:    "invalid_query_param",
					Message: err.Error(),
				}}},
			}
		}
		return nil
	})
}

type BodyParamError struct {
	err error
}

func (e BodyParamError) Error() string {
	return fmt.Sprintf("invalid body param: %v", e.err)
}
func NewBodyParamError(err error) error {
	return &BodyParamError{err: err}
}
func init() {
	RegisterErrorConverter(func(err error) *Response {
		bodyParamError := &BodyParamError{}
		if ok := errors.As(err, bodyParamError); ok {
			return &Response{
				Code: http.StatusBadRequest,
				Object: APIErrorModal{Errors: []*ErrorMessage{{
					Code:    "invalid_body_param",
					Message: err.Error(),
				}}},
			}
		}
		return nil
	})
}
