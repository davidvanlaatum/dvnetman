// Code generated by mockery v2.52.2. DO NOT EDIT.

package openapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUserAPI is an autogenerated mock type for the UserAPI type
type MockUserAPI struct {
	mock.Mock
}

type MockUserAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserAPI) EXPECT() *MockUserAPI_Expecter {
	return &MockUserAPI_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, opts
func (_m *MockUserAPI) CreateUser(ctx context.Context, opts *CreateUserOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateUserOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateUserOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateUserOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAPI_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserAPI_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *CreateUserOpts
func (_e *MockUserAPI_Expecter) CreateUser(ctx interface{}, opts interface{}) *MockUserAPI_CreateUser_Call {
	return &MockUserAPI_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, opts)}
}

func (_c *MockUserAPI_CreateUser_Call) Run(run func(ctx context.Context, opts *CreateUserOpts)) *MockUserAPI_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateUserOpts))
	})
	return _c
}

func (_c *MockUserAPI_CreateUser_Call) Return(res *Response, err error) *MockUserAPI_CreateUser_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockUserAPI_CreateUser_Call) RunAndReturn(run func(context.Context, *CreateUserOpts) (*Response, error)) *MockUserAPI_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, opts
func (_m *MockUserAPI) DeleteUser(ctx context.Context, opts *DeleteUserOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteUserOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteUserOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DeleteUserOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAPI_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserAPI_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *DeleteUserOpts
func (_e *MockUserAPI_Expecter) DeleteUser(ctx interface{}, opts interface{}) *MockUserAPI_DeleteUser_Call {
	return &MockUserAPI_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, opts)}
}

func (_c *MockUserAPI_DeleteUser_Call) Run(run func(ctx context.Context, opts *DeleteUserOpts)) *MockUserAPI_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteUserOpts))
	})
	return _c
}

func (_c *MockUserAPI_DeleteUser_Call) Return(res *Response, err error) *MockUserAPI_DeleteUser_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockUserAPI_DeleteUser_Call) RunAndReturn(run func(context.Context, *DeleteUserOpts) (*Response, error)) *MockUserAPI_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentUser provides a mock function with given fields: ctx
func (_m *MockUserAPI) GetCurrentUser(ctx context.Context) (*Response, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUser")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAPI_GetCurrentUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUser'
type MockUserAPI_GetCurrentUser_Call struct {
	*mock.Call
}

// GetCurrentUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) GetCurrentUser(ctx interface{}) *MockUserAPI_GetCurrentUser_Call {
	return &MockUserAPI_GetCurrentUser_Call{Call: _e.mock.On("GetCurrentUser", ctx)}
}

func (_c *MockUserAPI_GetCurrentUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_GetCurrentUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_GetCurrentUser_Call) Return(res *Response, err error) *MockUserAPI_GetCurrentUser_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockUserAPI_GetCurrentUser_Call) RunAndReturn(run func(context.Context) (*Response, error)) *MockUserAPI_GetCurrentUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, opts
func (_m *MockUserAPI) GetUser(ctx context.Context, opts *GetUserOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetUserOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetUserOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetUserOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAPI_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserAPI_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *GetUserOpts
func (_e *MockUserAPI_Expecter) GetUser(ctx interface{}, opts interface{}) *MockUserAPI_GetUser_Call {
	return &MockUserAPI_GetUser_Call{Call: _e.mock.On("GetUser", ctx, opts)}
}

func (_c *MockUserAPI_GetUser_Call) Run(run func(ctx context.Context, opts *GetUserOpts)) *MockUserAPI_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetUserOpts))
	})
	return _c
}

func (_c *MockUserAPI_GetUser_Call) Return(res *Response, err error) *MockUserAPI_GetUser_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockUserAPI_GetUser_Call) RunAndReturn(run func(context.Context, *GetUserOpts) (*Response, error)) *MockUserAPI_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserProviders provides a mock function with given fields: ctx
func (_m *MockUserAPI) GetUserProviders(ctx context.Context) (*Response, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProviders")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAPI_GetUserProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProviders'
type MockUserAPI_GetUserProviders_Call struct {
	*mock.Call
}

// GetUserProviders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) GetUserProviders(ctx interface{}) *MockUserAPI_GetUserProviders_Call {
	return &MockUserAPI_GetUserProviders_Call{Call: _e.mock.On("GetUserProviders", ctx)}
}

func (_c *MockUserAPI_GetUserProviders_Call) Run(run func(ctx context.Context)) *MockUserAPI_GetUserProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_GetUserProviders_Call) Return(res *Response, err error) *MockUserAPI_GetUserProviders_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockUserAPI_GetUserProviders_Call) RunAndReturn(run func(context.Context) (*Response, error)) *MockUserAPI_GetUserProviders_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, opts
func (_m *MockUserAPI) ListUsers(ctx context.Context, opts *ListUsersOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListUsersOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListUsersOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListUsersOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAPI_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockUserAPI_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *ListUsersOpts
func (_e *MockUserAPI_Expecter) ListUsers(ctx interface{}, opts interface{}) *MockUserAPI_ListUsers_Call {
	return &MockUserAPI_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, opts)}
}

func (_c *MockUserAPI_ListUsers_Call) Run(run func(ctx context.Context, opts *ListUsersOpts)) *MockUserAPI_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListUsersOpts))
	})
	return _c
}

func (_c *MockUserAPI_ListUsers_Call) Return(res *Response, err error) *MockUserAPI_ListUsers_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockUserAPI_ListUsers_Call) RunAndReturn(run func(context.Context, *ListUsersOpts) (*Response, error)) *MockUserAPI_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, opts
func (_m *MockUserAPI) UpdateUser(ctx context.Context, opts *UpdateUserOpts) (*Response, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateUserOpts) (*Response, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateUserOpts) *Response); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpdateUserOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAPI_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserAPI_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *UpdateUserOpts
func (_e *MockUserAPI_Expecter) UpdateUser(ctx interface{}, opts interface{}) *MockUserAPI_UpdateUser_Call {
	return &MockUserAPI_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, opts)}
}

func (_c *MockUserAPI_UpdateUser_Call) Run(run func(ctx context.Context, opts *UpdateUserOpts)) *MockUserAPI_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*UpdateUserOpts))
	})
	return _c
}

func (_c *MockUserAPI_UpdateUser_Call) Return(res *Response, err error) *MockUserAPI_UpdateUser_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockUserAPI_UpdateUser_Call) RunAndReturn(run func(context.Context, *UpdateUserOpts) (*Response, error)) *MockUserAPI_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserAPI creates a new instance of MockUserAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserAPI {
	mock := &MockUserAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
