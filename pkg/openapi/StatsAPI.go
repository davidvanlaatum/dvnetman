// Code generated by dvnetman. DO NOT EDIT.

package openapi

import (
	"context"
	logger "dvnetman/pkg/logger"
	mux "github.com/gorilla/mux"
	errors "github.com/pkg/errors"
	"net/http"
)

type StatsAPI interface {
	GetStats(ctx context.Context) (res *Response, err error)
}
type StatsAPIHandler struct {
	service StatsAPI
	errors  ErrorHandler
}

func (h *StatsAPIHandler) GetStats(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	if res, err = h.service.GetStats(r.Context()); err != nil {
		h.errors.ErrorHandler(w, r, err)
	} else if res == nil {
		h.errors.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		logger.Info(r.Context()).Err(err).Msg("error writing response")
	}
}
func AttachStatsAPI(service StatsAPI, errors ErrorHandler, router *mux.Router) {
	handler := &StatsAPIHandler{
		errors:  errors,
		service: service,
	}
	router.Methods(http.MethodGet).Path("/api/v1/stats").Name("GetStats").HandlerFunc(handler.GetStats)
}
