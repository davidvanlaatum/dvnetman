// Code generated by mockery v2.52.2. DO NOT EDIT.

package openapi

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockErrorHandler is an autogenerated mock type for the ErrorHandler type
type MockErrorHandler struct {
	mock.Mock
}

type MockErrorHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorHandler) EXPECT() *MockErrorHandler_Expecter {
	return &MockErrorHandler_Expecter{mock: &_m.Mock}
}

// ErrorHandler provides a mock function with given fields: w, r, err
func (_m *MockErrorHandler) ErrorHandler(w http.ResponseWriter, r *http.Request, err error) {
	_m.Called(w, r, err)
}

// MockErrorHandler_ErrorHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorHandler'
type MockErrorHandler_ErrorHandler_Call struct {
	*mock.Call
}

// ErrorHandler is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - err error
func (_e *MockErrorHandler_Expecter) ErrorHandler(w interface{}, r interface{}, err interface{}) *MockErrorHandler_ErrorHandler_Call {
	return &MockErrorHandler_ErrorHandler_Call{Call: _e.mock.On("ErrorHandler", w, r, err)}
}

func (_c *MockErrorHandler_ErrorHandler_Call) Run(run func(w http.ResponseWriter, r *http.Request, err error)) *MockErrorHandler_ErrorHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(error))
	})
	return _c
}

func (_c *MockErrorHandler_ErrorHandler_Call) Return() *MockErrorHandler_ErrorHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockErrorHandler_ErrorHandler_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, error)) *MockErrorHandler_ErrorHandler_Call {
	_c.Run(run)
	return _c
}

// NewMockErrorHandler creates a new instance of MockErrorHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorHandler {
	mock := &MockErrorHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
