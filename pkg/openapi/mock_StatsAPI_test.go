// Code generated by mockery v2.52.2. DO NOT EDIT.

package openapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockStatsAPI is an autogenerated mock type for the StatsAPI type
type MockStatsAPI struct {
	mock.Mock
}

type MockStatsAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatsAPI) EXPECT() *MockStatsAPI_Expecter {
	return &MockStatsAPI_Expecter{mock: &_m.Mock}
}

// GetStats provides a mock function with given fields: ctx
func (_m *MockStatsAPI) GetStats(ctx context.Context) (*Response, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStatsAPI_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type MockStatsAPI_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStatsAPI_Expecter) GetStats(ctx interface{}) *MockStatsAPI_GetStats_Call {
	return &MockStatsAPI_GetStats_Call{Call: _e.mock.On("GetStats", ctx)}
}

func (_c *MockStatsAPI_GetStats_Call) Run(run func(ctx context.Context)) *MockStatsAPI_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStatsAPI_GetStats_Call) Return(res *Response, err error) *MockStatsAPI_GetStats_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockStatsAPI_GetStats_Call) RunAndReturn(run func(context.Context) (*Response, error)) *MockStatsAPI_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStatsAPI creates a new instance of MockStatsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStatsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStatsAPI {
	mock := &MockStatsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
