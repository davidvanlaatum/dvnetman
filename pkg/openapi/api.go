// Code generated by dvnetman. DO NOT EDIT.

package openapi

import (
	"context"
	utils "dvnetman/pkg/utils"
	"encoding/json"
	uuid "github.com/google/uuid"
	mux "github.com/gorilla/mux"
	errors "github.com/pkg/errors"
	"net/http"
	"strconv"
	"time"
)

type CreateDeviceOpts struct {
	Body *Device
}
type ListDevicesOpts struct {
	Page    *int
	PerPage *int
	Sort    *string
	Body    *DeviceSearchBody
}
type DeleteDeviceOpts struct {
	Id uuid.UUID
}
type GetDeviceOpts struct {
	Id              uuid.UUID
	IfNoneMatch     *string
	IfModifiedSince *time.Time
}
type UpdateDeviceOpts struct {
	Id   uuid.UUID
	Body *Device
}
type CreateDeviceTypeOpts struct {
	Body *DeviceType
}
type ListDeviceTypesOpts struct {
	Page    *int
	PerPage *int
	Sort    *string
	Body    *DeviceTypeSearchBody
}
type DeleteDeviceTypeOpts struct {
	Id uuid.UUID
}
type GetDeviceTypeOpts struct {
	Id              uuid.UUID
	IfNoneMatch     *string
	IfModifiedSince *time.Time
}
type UpdateDeviceTypeOpts struct {
	Id   uuid.UUID
	Body *DeviceType
}
type CreateLocationOpts struct {
	Body *Location
}
type ListLocationsOpts struct {
	Page    *int
	PerPage *int
	Sort    *string
	Body    *LocationSearchBody
}
type DeleteLocationOpts struct {
	Id uuid.UUID
}
type GetLocationOpts struct {
	Id              uuid.UUID
	IfNoneMatch     *string
	IfModifiedSince *time.Time
}
type UpdateLocationOpts struct {
	Id   uuid.UUID
	Body *Location
}
type CreateManufacturerOpts struct {
	Body *Manufacturer
}
type ListManufacturersOpts struct {
	Page    *int
	PerPage *int
	Sort    *string
	Body    *ManufacturerSearchBody
}
type DeleteManufacturerOpts struct {
	Id uuid.UUID
}
type GetManufacturerOpts struct {
	Id              uuid.UUID
	IfNoneMatch     *string
	IfModifiedSince *time.Time
}
type UpdateManufacturerOpts struct {
	Id   uuid.UUID
	Body *Manufacturer
}
type CreateSiteOpts struct {
	Body *Site
}
type ListSitesOpts struct {
	Page    *int
	PerPage *int
	Sort    *string
	Body    *SiteSearchBody
}
type DeleteSiteOpts struct {
	Id uuid.UUID
}
type GetSiteOpts struct {
	Id              uuid.UUID
	IfNoneMatch     *string
	IfModifiedSince *time.Time
}
type UpdateSiteOpts struct {
	Id   uuid.UUID
	Body *Site
}
type CreateUserOpts struct {
	Body *User
}
type ListUsersOpts struct {
	Page    *int
	PerPage *int
	Sort    *string
	Body    *UserSearchBody
}
type DeleteUserOpts struct {
	Id uuid.UUID
}
type GetUserOpts struct {
	Id              uuid.UUID
	IfNoneMatch     *string
	IfModifiedSince *time.Time
}
type UpdateUserOpts struct {
	Id   uuid.UUID
	Body *User
}
type API interface {
	CreateDevice(ctx context.Context, opts *CreateDeviceOpts) (res *Response, err error)
	CreateDeviceType(ctx context.Context, opts *CreateDeviceTypeOpts) (res *Response, err error)
	CreateLocation(ctx context.Context, opts *CreateLocationOpts) (res *Response, err error)
	CreateManufacturer(ctx context.Context, opts *CreateManufacturerOpts) (res *Response, err error)
	CreateSite(ctx context.Context, opts *CreateSiteOpts) (res *Response, err error)
	CreateUser(ctx context.Context, opts *CreateUserOpts) (res *Response, err error)
	DeleteDevice(ctx context.Context, opts *DeleteDeviceOpts) (res *Response, err error)
	DeleteDeviceType(ctx context.Context, opts *DeleteDeviceTypeOpts) (res *Response, err error)
	DeleteLocation(ctx context.Context, opts *DeleteLocationOpts) (res *Response, err error)
	DeleteManufacturer(ctx context.Context, opts *DeleteManufacturerOpts) (res *Response, err error)
	DeleteSite(ctx context.Context, opts *DeleteSiteOpts) (res *Response, err error)
	DeleteUser(ctx context.Context, opts *DeleteUserOpts) (res *Response, err error)
	GetCurrentUser(ctx context.Context) (res *Response, err error)
	GetDevice(ctx context.Context, opts *GetDeviceOpts) (res *Response, err error)
	GetDeviceType(ctx context.Context, opts *GetDeviceTypeOpts) (res *Response, err error)
	GetLocation(ctx context.Context, opts *GetLocationOpts) (res *Response, err error)
	GetManufacturer(ctx context.Context, opts *GetManufacturerOpts) (res *Response, err error)
	GetSite(ctx context.Context, opts *GetSiteOpts) (res *Response, err error)
	GetStats(ctx context.Context) (res *Response, err error)
	GetUser(ctx context.Context, opts *GetUserOpts) (res *Response, err error)
	GetUserProviders(ctx context.Context) (res *Response, err error)
	ListDeviceTypes(ctx context.Context, opts *ListDeviceTypesOpts) (res *Response, err error)
	ListDevices(ctx context.Context, opts *ListDevicesOpts) (res *Response, err error)
	ListLocations(ctx context.Context, opts *ListLocationsOpts) (res *Response, err error)
	ListManufacturers(ctx context.Context, opts *ListManufacturersOpts) (res *Response, err error)
	ListSites(ctx context.Context, opts *ListSitesOpts) (res *Response, err error)
	ListUsers(ctx context.Context, opts *ListUsersOpts) (res *Response, err error)
	UpdateDevice(ctx context.Context, opts *UpdateDeviceOpts) (res *Response, err error)
	UpdateDeviceType(ctx context.Context, opts *UpdateDeviceTypeOpts) (res *Response, err error)
	UpdateLocation(ctx context.Context, opts *UpdateLocationOpts) (res *Response, err error)
	UpdateManufacturer(ctx context.Context, opts *UpdateManufacturerOpts) (res *Response, err error)
	UpdateSite(ctx context.Context, opts *UpdateSiteOpts) (res *Response, err error)
	UpdateUser(ctx context.Context, opts *UpdateUserOpts) (res *Response, err error)
	ErrorHandler(w http.ResponseWriter, r *http.Request, err error)
	WriteErrorHandler(w http.ResponseWriter, r *http.Request, err error)
}
type Response struct {
	Code    int
	Headers http.Header
	Object  interface{}
}

func (res *Response) Write(r *http.Request, w http.ResponseWriter) (err error) {
	var data []byte
	if res.Object != nil {
		w.Header().Set("Content-Type", "application/json")
		if data, err = json.MarshalIndent(res.Object, "", "  "); err != nil {
			return errors.Wrap(err, "failed to marshal response data")
		}
		w.Header().Set("Content-Length", strconv.FormatUint(uint64(len(data)), 10))
	}
	if res.Code == 0 {
		return errors.New("response code not set")
	}
	for k, v := range res.Headers {
		for _, value := range v {
			w.Header().Add(k, value)
		}
	}
	w.WriteHeader(res.Code)
	if data != nil {
		_, err = w.Write(data)
	}
	return
}

type apiHandler struct {
	service API
}

func (h *apiHandler) CreateDevice(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &CreateDeviceOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.CreateDevice(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) ListDevices(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &ListDevicesOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	for k, v := range r.URL.Query() {
		switch k {
		case "page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("page", err)))
				return
			}
			opts.Page = utils.ToPtr(x)
		case "per_page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("per_page", err)))
				return
			}
			opts.PerPage = utils.ToPtr(x)
		case "sort":
			opts.Sort = utils.ToPtr(v[0])
		}
	}
	if res, err = h.service.ListDevices(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) DeleteDevice(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &DeleteDeviceOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	if res, err = h.service.DeleteDevice(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) GetDevice(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &GetDeviceOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	for k, v := range r.Header {
		switch k {
		case "If-None-Match":
			opts.IfNoneMatch = utils.ToPtr(v[0])
		case "If-Modified-Since":
			var t time.Time
			if t, err = time.Parse(time.RFC1123, v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("If-Modified-Since", err)))
				return
			}
			opts.IfModifiedSince = utils.ToPtr(t)
		}
	}
	if res, err = h.service.GetDevice(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) UpdateDevice(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &UpdateDeviceOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.UpdateDevice(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) CreateDeviceType(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &CreateDeviceTypeOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.CreateDeviceType(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) ListDeviceTypes(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &ListDeviceTypesOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	for k, v := range r.URL.Query() {
		switch k {
		case "page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("page", err)))
				return
			}
			opts.Page = utils.ToPtr(x)
		case "per_page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("per_page", err)))
				return
			}
			opts.PerPage = utils.ToPtr(x)
		case "sort":
			opts.Sort = utils.ToPtr(v[0])
		}
	}
	if res, err = h.service.ListDeviceTypes(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) DeleteDeviceType(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &DeleteDeviceTypeOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	if res, err = h.service.DeleteDeviceType(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) GetDeviceType(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &GetDeviceTypeOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	for k, v := range r.Header {
		switch k {
		case "If-None-Match":
			opts.IfNoneMatch = utils.ToPtr(v[0])
		case "If-Modified-Since":
			var t time.Time
			if t, err = time.Parse(time.RFC1123, v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("If-Modified-Since", err)))
				return
			}
			opts.IfModifiedSince = utils.ToPtr(t)
		}
	}
	if res, err = h.service.GetDeviceType(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) UpdateDeviceType(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &UpdateDeviceTypeOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.UpdateDeviceType(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) CreateLocation(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &CreateLocationOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.CreateLocation(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) ListLocations(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &ListLocationsOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	for k, v := range r.URL.Query() {
		switch k {
		case "page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("page", err)))
				return
			}
			opts.Page = utils.ToPtr(x)
		case "per_page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("per_page", err)))
				return
			}
			opts.PerPage = utils.ToPtr(x)
		case "sort":
			opts.Sort = utils.ToPtr(v[0])
		}
	}
	if res, err = h.service.ListLocations(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) DeleteLocation(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &DeleteLocationOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	if res, err = h.service.DeleteLocation(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) GetLocation(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &GetLocationOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	for k, v := range r.Header {
		switch k {
		case "If-None-Match":
			opts.IfNoneMatch = utils.ToPtr(v[0])
		case "If-Modified-Since":
			var t time.Time
			if t, err = time.Parse(time.RFC1123, v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("If-Modified-Since", err)))
				return
			}
			opts.IfModifiedSince = utils.ToPtr(t)
		}
	}
	if res, err = h.service.GetLocation(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) UpdateLocation(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &UpdateLocationOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.UpdateLocation(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) CreateManufacturer(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &CreateManufacturerOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.CreateManufacturer(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) ListManufacturers(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &ListManufacturersOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	for k, v := range r.URL.Query() {
		switch k {
		case "page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("page", err)))
				return
			}
			opts.Page = utils.ToPtr(x)
		case "per_page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("per_page", err)))
				return
			}
			opts.PerPage = utils.ToPtr(x)
		case "sort":
			opts.Sort = utils.ToPtr(v[0])
		}
	}
	if res, err = h.service.ListManufacturers(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) DeleteManufacturer(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &DeleteManufacturerOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	if res, err = h.service.DeleteManufacturer(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) GetManufacturer(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &GetManufacturerOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	for k, v := range r.Header {
		switch k {
		case "If-None-Match":
			opts.IfNoneMatch = utils.ToPtr(v[0])
		case "If-Modified-Since":
			var t time.Time
			if t, err = time.Parse(time.RFC1123, v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("If-Modified-Since", err)))
				return
			}
			opts.IfModifiedSince = utils.ToPtr(t)
		}
	}
	if res, err = h.service.GetManufacturer(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) UpdateManufacturer(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &UpdateManufacturerOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.UpdateManufacturer(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) CreateSite(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &CreateSiteOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.CreateSite(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) ListSites(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &ListSitesOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	for k, v := range r.URL.Query() {
		switch k {
		case "page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("page", err)))
				return
			}
			opts.Page = utils.ToPtr(x)
		case "per_page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("per_page", err)))
				return
			}
			opts.PerPage = utils.ToPtr(x)
		case "sort":
			opts.Sort = utils.ToPtr(v[0])
		}
	}
	if res, err = h.service.ListSites(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) DeleteSite(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &DeleteSiteOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	if res, err = h.service.DeleteSite(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) GetSite(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &GetSiteOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	for k, v := range r.Header {
		switch k {
		case "If-None-Match":
			opts.IfNoneMatch = utils.ToPtr(v[0])
		case "If-Modified-Since":
			var t time.Time
			if t, err = time.Parse(time.RFC1123, v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("If-Modified-Since", err)))
				return
			}
			opts.IfModifiedSince = utils.ToPtr(t)
		}
	}
	if res, err = h.service.GetSite(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) UpdateSite(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &UpdateSiteOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.UpdateSite(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) GetStats(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	if res, err = h.service.GetStats(r.Context()); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &CreateUserOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.CreateUser(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	if res, err = h.service.GetCurrentUser(r.Context()); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) GetUserProviders(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	if res, err = h.service.GetUserProviders(r.Context()); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) ListUsers(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &ListUsersOpts{}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	for k, v := range r.URL.Query() {
		switch k {
		case "page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("page", err)))
				return
			}
			opts.Page = utils.ToPtr(x)
		case "per_page":
			var x int
			if x, err = strconv.Atoi(v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("per_page", err)))
				return
			}
			opts.PerPage = utils.ToPtr(x)
		case "sort":
			opts.Sort = utils.ToPtr(v[0])
		}
	}
	if res, err = h.service.ListUsers(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) DeleteUser(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &DeleteUserOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	if res, err = h.service.DeleteUser(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) GetUser(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &GetUserOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	for k, v := range r.Header {
		switch k {
		case "If-None-Match":
			opts.IfNoneMatch = utils.ToPtr(v[0])
		case "If-Modified-Since":
			var t time.Time
			if t, err = time.Parse(time.RFC1123, v[0]); err != nil {
				h.service.ErrorHandler(w, r, errors.WithStack(NewQueryParamError("If-Modified-Since", err)))
				return
			}
			opts.IfModifiedSince = utils.ToPtr(t)
		}
	}
	if res, err = h.service.GetUser(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func (h *apiHandler) UpdateUser(w http.ResponseWriter, r *http.Request) {
	var res *Response
	var err error
	opts := &UpdateUserOpts{}
	vars := mux.Vars(r)
	if opts.Id, err = uuid.Parse(vars["id"]); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewPathParamError("Id", err)))
		return
	}
	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&opts.Body); err != nil {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(err)))
		return
	}
	if decoder.More() {
		h.service.ErrorHandler(w, r, errors.WithStack(NewBodyParamError(errors.New("unexpected data after body"))))
		return
	}
	if res, err = h.service.UpdateUser(r.Context(), opts); err != nil {
		h.service.ErrorHandler(w, r, err)
	} else if res == nil {
		h.service.ErrorHandler(w, r, errors.Errorf("no response returned"))
	} else if err = res.Write(r, w); err != nil {
		h.service.WriteErrorHandler(w, r, err)
	}
}
func NewRouter(service API) (router *mux.Router) {
	router = mux.NewRouter().StrictSlash(true)
	handler := &apiHandler{service: service}
	router.Methods("POST").Path("/api/v1/device").Name("CreateDevice").HandlerFunc(handler.CreateDevice)
	router.Methods("POST").Path("/api/v1/device/search").Name("ListDevices").HandlerFunc(handler.ListDevices)
	router.Methods("DELETE").Path("/api/v1/device/{id}").Name("DeleteDevice").HandlerFunc(handler.DeleteDevice)
	router.Methods("GET").Path("/api/v1/device/{id}").Name("GetDevice").HandlerFunc(handler.GetDevice)
	router.Methods("PUT").Path("/api/v1/device/{id}").Name("UpdateDevice").HandlerFunc(handler.UpdateDevice)
	router.Methods("POST").Path("/api/v1/deviceType").Name("CreateDeviceType").HandlerFunc(handler.CreateDeviceType)
	router.Methods("POST").Path("/api/v1/deviceType/search").Name("ListDeviceTypes").HandlerFunc(handler.ListDeviceTypes)
	router.Methods("DELETE").Path("/api/v1/deviceType/{id}").Name("DeleteDeviceType").HandlerFunc(handler.DeleteDeviceType)
	router.Methods("GET").Path("/api/v1/deviceType/{id}").Name("GetDeviceType").HandlerFunc(handler.GetDeviceType)
	router.Methods("PUT").Path("/api/v1/deviceType/{id}").Name("UpdateDeviceType").HandlerFunc(handler.UpdateDeviceType)
	router.Methods("POST").Path("/api/v1/location").Name("CreateLocation").HandlerFunc(handler.CreateLocation)
	router.Methods("POST").Path("/api/v1/location/search").Name("ListLocations").HandlerFunc(handler.ListLocations)
	router.Methods("DELETE").Path("/api/v1/location/{id}").Name("DeleteLocation").HandlerFunc(handler.DeleteLocation)
	router.Methods("GET").Path("/api/v1/location/{id}").Name("GetLocation").HandlerFunc(handler.GetLocation)
	router.Methods("PUT").Path("/api/v1/location/{id}").Name("UpdateLocation").HandlerFunc(handler.UpdateLocation)
	router.Methods("POST").Path("/api/v1/manufacturer").Name("CreateManufacturer").HandlerFunc(handler.CreateManufacturer)
	router.Methods("POST").Path("/api/v1/manufacturer/search").Name("ListManufacturers").HandlerFunc(handler.ListManufacturers)
	router.Methods("DELETE").Path("/api/v1/manufacturer/{id}").Name("DeleteManufacturer").HandlerFunc(handler.DeleteManufacturer)
	router.Methods("GET").Path("/api/v1/manufacturer/{id}").Name("GetManufacturer").HandlerFunc(handler.GetManufacturer)
	router.Methods("PUT").Path("/api/v1/manufacturer/{id}").Name("UpdateManufacturer").HandlerFunc(handler.UpdateManufacturer)
	router.Methods("POST").Path("/api/v1/site").Name("CreateSite").HandlerFunc(handler.CreateSite)
	router.Methods("POST").Path("/api/v1/site/search").Name("ListSites").HandlerFunc(handler.ListSites)
	router.Methods("DELETE").Path("/api/v1/site/{id}").Name("DeleteSite").HandlerFunc(handler.DeleteSite)
	router.Methods("GET").Path("/api/v1/site/{id}").Name("GetSite").HandlerFunc(handler.GetSite)
	router.Methods("PUT").Path("/api/v1/site/{id}").Name("UpdateSite").HandlerFunc(handler.UpdateSite)
	router.Methods("GET").Path("/api/v1/stats").Name("GetStats").HandlerFunc(handler.GetStats)
	router.Methods("POST").Path("/api/v1/user").Name("CreateUser").HandlerFunc(handler.CreateUser)
	router.Methods("GET").Path("/api/v1/user/current").Name("GetCurrentUser").HandlerFunc(handler.GetCurrentUser)
	router.Methods("GET").Path("/api/v1/user/providers").Name("GetUserProviders").HandlerFunc(handler.GetUserProviders)
	router.Methods("POST").Path("/api/v1/user/search").Name("ListUsers").HandlerFunc(handler.ListUsers)
	router.Methods("DELETE").Path("/api/v1/user/{id}").Name("DeleteUser").HandlerFunc(handler.DeleteUser)
	router.Methods("GET").Path("/api/v1/user/{id}").Name("GetUser").HandlerFunc(handler.GetUser)
	router.Methods("PUT").Path("/api/v1/user/{id}").Name("UpdateUser").HandlerFunc(handler.UpdateUser)
	return
}
